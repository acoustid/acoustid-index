// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: index.proto

#include "index.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_index_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteDocumentOp_index_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_index_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IndexInfo_index_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_index_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InsertOrUpdateDocumentOp_index_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_index_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Operation_index_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_index_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SearchResult_index_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_index_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetAttributeOp_index_2eproto;
namespace fpindex {
class IndexInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IndexInfo> _instance;
} _IndexInfo_default_instance_;
class GetAttributeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAttributeRequest> _instance;
} _GetAttributeRequest_default_instance_;
class GetAttributeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAttributeResponse> _instance;
} _GetAttributeResponse_default_instance_;
class InsertOrUpdateDocumentOpDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InsertOrUpdateDocumentOp> _instance;
} _InsertOrUpdateDocumentOp_default_instance_;
class DeleteDocumentOpDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteDocumentOp> _instance;
} _DeleteDocumentOp_default_instance_;
class SetAttributeOpDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetAttributeOp> _instance;
} _SetAttributeOp_default_instance_;
class OperationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Operation> _instance;
  const ::fpindex::InsertOrUpdateDocumentOp* insert_or_update_document_;
  const ::fpindex::DeleteDocumentOp* delete_document_;
  const ::fpindex::SetAttributeOp* set_attribute_;
} _Operation_default_instance_;
class UpdateRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateRequest> _instance;
} _UpdateRequest_default_instance_;
class UpdateResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateResponse> _instance;
} _UpdateResponse_default_instance_;
class SearchResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SearchResult> _instance;
} _SearchResult_default_instance_;
class SearchRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SearchRequest> _instance;
} _SearchRequest_default_instance_;
class SearchResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SearchResponse> _instance;
} _SearchResponse_default_instance_;
class GetIndexRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetIndexRequest> _instance;
} _GetIndexRequest_default_instance_;
class GetIndexResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetIndexResponse> _instance;
} _GetIndexResponse_default_instance_;
class CreateIndexRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateIndexRequest> _instance;
} _CreateIndexRequest_default_instance_;
class CreateIndexResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateIndexResponse> _instance;
} _CreateIndexResponse_default_instance_;
class DeleteIndexRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteIndexRequest> _instance;
} _DeleteIndexRequest_default_instance_;
class DeleteIndexResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteIndexResponse> _instance;
} _DeleteIndexResponse_default_instance_;
class ListIndexesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListIndexesRequest> _instance;
} _ListIndexesRequest_default_instance_;
class ListIndexesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListIndexesResponse> _instance;
} _ListIndexesResponse_default_instance_;
}  // namespace fpindex
static void InitDefaultsscc_info_CreateIndexRequest_index_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fpindex::_CreateIndexRequest_default_instance_;
    new (ptr) ::fpindex::CreateIndexRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fpindex::CreateIndexRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateIndexRequest_index_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateIndexRequest_index_2eproto}, {}};

static void InitDefaultsscc_info_CreateIndexResponse_index_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fpindex::_CreateIndexResponse_default_instance_;
    new (ptr) ::fpindex::CreateIndexResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fpindex::CreateIndexResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateIndexResponse_index_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreateIndexResponse_index_2eproto}, {
      &scc_info_IndexInfo_index_2eproto.base,}};

static void InitDefaultsscc_info_DeleteDocumentOp_index_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fpindex::_DeleteDocumentOp_default_instance_;
    new (ptr) ::fpindex::DeleteDocumentOp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fpindex::DeleteDocumentOp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteDocumentOp_index_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteDocumentOp_index_2eproto}, {}};

static void InitDefaultsscc_info_DeleteIndexRequest_index_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fpindex::_DeleteIndexRequest_default_instance_;
    new (ptr) ::fpindex::DeleteIndexRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fpindex::DeleteIndexRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteIndexRequest_index_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteIndexRequest_index_2eproto}, {}};

static void InitDefaultsscc_info_DeleteIndexResponse_index_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fpindex::_DeleteIndexResponse_default_instance_;
    new (ptr) ::fpindex::DeleteIndexResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fpindex::DeleteIndexResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteIndexResponse_index_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteIndexResponse_index_2eproto}, {}};

static void InitDefaultsscc_info_GetAttributeRequest_index_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fpindex::_GetAttributeRequest_default_instance_;
    new (ptr) ::fpindex::GetAttributeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fpindex::GetAttributeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetAttributeRequest_index_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetAttributeRequest_index_2eproto}, {}};

static void InitDefaultsscc_info_GetAttributeResponse_index_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fpindex::_GetAttributeResponse_default_instance_;
    new (ptr) ::fpindex::GetAttributeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fpindex::GetAttributeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetAttributeResponse_index_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetAttributeResponse_index_2eproto}, {}};

static void InitDefaultsscc_info_GetIndexRequest_index_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fpindex::_GetIndexRequest_default_instance_;
    new (ptr) ::fpindex::GetIndexRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fpindex::GetIndexRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetIndexRequest_index_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetIndexRequest_index_2eproto}, {}};

static void InitDefaultsscc_info_GetIndexResponse_index_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fpindex::_GetIndexResponse_default_instance_;
    new (ptr) ::fpindex::GetIndexResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fpindex::GetIndexResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetIndexResponse_index_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetIndexResponse_index_2eproto}, {
      &scc_info_IndexInfo_index_2eproto.base,}};

static void InitDefaultsscc_info_IndexInfo_index_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fpindex::_IndexInfo_default_instance_;
    new (ptr) ::fpindex::IndexInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fpindex::IndexInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IndexInfo_index_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IndexInfo_index_2eproto}, {}};

static void InitDefaultsscc_info_InsertOrUpdateDocumentOp_index_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fpindex::_InsertOrUpdateDocumentOp_default_instance_;
    new (ptr) ::fpindex::InsertOrUpdateDocumentOp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fpindex::InsertOrUpdateDocumentOp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InsertOrUpdateDocumentOp_index_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InsertOrUpdateDocumentOp_index_2eproto}, {}};

static void InitDefaultsscc_info_ListIndexesRequest_index_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fpindex::_ListIndexesRequest_default_instance_;
    new (ptr) ::fpindex::ListIndexesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fpindex::ListIndexesRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListIndexesRequest_index_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListIndexesRequest_index_2eproto}, {}};

static void InitDefaultsscc_info_ListIndexesResponse_index_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fpindex::_ListIndexesResponse_default_instance_;
    new (ptr) ::fpindex::ListIndexesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fpindex::ListIndexesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListIndexesResponse_index_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListIndexesResponse_index_2eproto}, {
      &scc_info_IndexInfo_index_2eproto.base,}};

static void InitDefaultsscc_info_Operation_index_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fpindex::_Operation_default_instance_;
    new (ptr) ::fpindex::Operation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fpindex::Operation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Operation_index_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Operation_index_2eproto}, {
      &scc_info_InsertOrUpdateDocumentOp_index_2eproto.base,
      &scc_info_DeleteDocumentOp_index_2eproto.base,
      &scc_info_SetAttributeOp_index_2eproto.base,}};

static void InitDefaultsscc_info_SearchRequest_index_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fpindex::_SearchRequest_default_instance_;
    new (ptr) ::fpindex::SearchRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fpindex::SearchRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SearchRequest_index_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SearchRequest_index_2eproto}, {}};

static void InitDefaultsscc_info_SearchResponse_index_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fpindex::_SearchResponse_default_instance_;
    new (ptr) ::fpindex::SearchResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fpindex::SearchResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SearchResponse_index_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SearchResponse_index_2eproto}, {
      &scc_info_SearchResult_index_2eproto.base,}};

static void InitDefaultsscc_info_SearchResult_index_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fpindex::_SearchResult_default_instance_;
    new (ptr) ::fpindex::SearchResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fpindex::SearchResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SearchResult_index_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SearchResult_index_2eproto}, {}};

static void InitDefaultsscc_info_SetAttributeOp_index_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fpindex::_SetAttributeOp_default_instance_;
    new (ptr) ::fpindex::SetAttributeOp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fpindex::SetAttributeOp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetAttributeOp_index_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetAttributeOp_index_2eproto}, {}};

static void InitDefaultsscc_info_UpdateRequest_index_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fpindex::_UpdateRequest_default_instance_;
    new (ptr) ::fpindex::UpdateRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fpindex::UpdateRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateRequest_index_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateRequest_index_2eproto}, {
      &scc_info_Operation_index_2eproto.base,}};

static void InitDefaultsscc_info_UpdateResponse_index_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fpindex::_UpdateResponse_default_instance_;
    new (ptr) ::fpindex::UpdateResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fpindex::UpdateResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateResponse_index_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UpdateResponse_index_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_index_2eproto[20];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_index_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_index_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_index_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fpindex::IndexInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fpindex::IndexInfo, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fpindex::GetAttributeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fpindex::GetAttributeRequest, index_name_),
  PROTOBUF_FIELD_OFFSET(::fpindex::GetAttributeRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fpindex::GetAttributeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fpindex::GetAttributeResponse, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fpindex::InsertOrUpdateDocumentOp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fpindex::InsertOrUpdateDocumentOp, doc_id_),
  PROTOBUF_FIELD_OFFSET(::fpindex::InsertOrUpdateDocumentOp, terms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fpindex::DeleteDocumentOp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fpindex::DeleteDocumentOp, doc_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fpindex::SetAttributeOp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fpindex::SetAttributeOp, name_),
  PROTOBUF_FIELD_OFFSET(::fpindex::SetAttributeOp, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fpindex::Operation, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::fpindex::Operation, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::fpindex::OperationDefaultTypeInternal, insert_or_update_document_),
  offsetof(::fpindex::OperationDefaultTypeInternal, delete_document_),
  offsetof(::fpindex::OperationDefaultTypeInternal, set_attribute_),
  PROTOBUF_FIELD_OFFSET(::fpindex::Operation, op_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fpindex::UpdateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fpindex::UpdateRequest, index_name_),
  PROTOBUF_FIELD_OFFSET(::fpindex::UpdateRequest, ops_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fpindex::UpdateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fpindex::SearchResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fpindex::SearchResult, doc_id_),
  PROTOBUF_FIELD_OFFSET(::fpindex::SearchResult, score_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fpindex::SearchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fpindex::SearchRequest, index_name_),
  PROTOBUF_FIELD_OFFSET(::fpindex::SearchRequest, terms_),
  PROTOBUF_FIELD_OFFSET(::fpindex::SearchRequest, max_results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fpindex::SearchResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fpindex::SearchResponse, results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fpindex::GetIndexRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fpindex::GetIndexRequest, index_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fpindex::GetIndexResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fpindex::GetIndexResponse, index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fpindex::CreateIndexRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fpindex::CreateIndexRequest, index_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fpindex::CreateIndexResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fpindex::CreateIndexResponse, index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fpindex::DeleteIndexRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fpindex::DeleteIndexRequest, index_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fpindex::DeleteIndexResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fpindex::ListIndexesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::fpindex::ListIndexesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fpindex::ListIndexesResponse, indexes_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::fpindex::IndexInfo)},
  { 6, -1, sizeof(::fpindex::GetAttributeRequest)},
  { 13, -1, sizeof(::fpindex::GetAttributeResponse)},
  { 19, -1, sizeof(::fpindex::InsertOrUpdateDocumentOp)},
  { 26, -1, sizeof(::fpindex::DeleteDocumentOp)},
  { 32, -1, sizeof(::fpindex::SetAttributeOp)},
  { 39, -1, sizeof(::fpindex::Operation)},
  { 48, -1, sizeof(::fpindex::UpdateRequest)},
  { 55, -1, sizeof(::fpindex::UpdateResponse)},
  { 60, -1, sizeof(::fpindex::SearchResult)},
  { 67, -1, sizeof(::fpindex::SearchRequest)},
  { 75, -1, sizeof(::fpindex::SearchResponse)},
  { 81, -1, sizeof(::fpindex::GetIndexRequest)},
  { 87, -1, sizeof(::fpindex::GetIndexResponse)},
  { 93, -1, sizeof(::fpindex::CreateIndexRequest)},
  { 99, -1, sizeof(::fpindex::CreateIndexResponse)},
  { 105, -1, sizeof(::fpindex::DeleteIndexRequest)},
  { 111, -1, sizeof(::fpindex::DeleteIndexResponse)},
  { 116, -1, sizeof(::fpindex::ListIndexesRequest)},
  { 121, -1, sizeof(::fpindex::ListIndexesResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fpindex::_IndexInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fpindex::_GetAttributeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fpindex::_GetAttributeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fpindex::_InsertOrUpdateDocumentOp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fpindex::_DeleteDocumentOp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fpindex::_SetAttributeOp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fpindex::_Operation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fpindex::_UpdateRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fpindex::_UpdateResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fpindex::_SearchResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fpindex::_SearchRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fpindex::_SearchResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fpindex::_GetIndexRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fpindex::_GetIndexResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fpindex::_CreateIndexRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fpindex::_CreateIndexResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fpindex::_DeleteIndexRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fpindex::_DeleteIndexResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fpindex::_ListIndexesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fpindex::_ListIndexesResponse_default_instance_),
};

const char descriptor_table_protodef_index_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013index.proto\022\007fpindex\032\034google/api/annot"
  "ations.proto\"\031\n\tIndexInfo\022\014\n\004name\030\001 \001(\t\""
  "7\n\023GetAttributeRequest\022\022\n\nindex_name\030\001 \001"
  "(\t\022\014\n\004name\030\002 \001(\t\"%\n\024GetAttributeResponse"
  "\022\r\n\005value\030\002 \001(\t\"9\n\030InsertOrUpdateDocumen"
  "tOp\022\016\n\006doc_id\030\001 \001(\r\022\r\n\005terms\030\002 \003(\r\"\"\n\020De"
  "leteDocumentOp\022\016\n\006doc_id\030\001 \001(\r\"-\n\016SetAtt"
  "ributeOp\022\014\n\004name\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"\301\001"
  "\n\tOperation\022F\n\031insert_or_update_document"
  "\030\001 \001(\0132!.fpindex.InsertOrUpdateDocumentO"
  "pH\000\0224\n\017delete_document\030\002 \001(\0132\031.fpindex.D"
  "eleteDocumentOpH\000\0220\n\rset_attribute\030\003 \001(\013"
  "2\027.fpindex.SetAttributeOpH\000B\004\n\002op\"D\n\rUpd"
  "ateRequest\022\022\n\nindex_name\030\001 \001(\t\022\037\n\003ops\030\002 "
  "\003(\0132\022.fpindex.Operation\"\020\n\016UpdateRespons"
  "e\"-\n\014SearchResult\022\016\n\006doc_id\030\001 \001(\r\022\r\n\005sco"
  "re\030\002 \001(\002\"G\n\rSearchRequest\022\022\n\nindex_name\030"
  "\001 \001(\t\022\r\n\005terms\030\002 \003(\r\022\023\n\013max_results\030\003 \001("
  "\005\"8\n\016SearchResponse\022&\n\007results\030\001 \003(\0132\025.f"
  "pindex.SearchResult\"%\n\017GetIndexRequest\022\022"
  "\n\nindex_name\030\001 \001(\t\"5\n\020GetIndexResponse\022!"
  "\n\005index\030\001 \001(\0132\022.fpindex.IndexInfo\"(\n\022Cre"
  "ateIndexRequest\022\022\n\nindex_name\030\001 \001(\t\"8\n\023C"
  "reateIndexResponse\022!\n\005index\030\001 \001(\0132\022.fpin"
  "dex.IndexInfo\"(\n\022DeleteIndexRequest\022\022\n\ni"
  "ndex_name\030\001 \001(\t\"\025\n\023DeleteIndexResponse\"\024"
  "\n\022ListIndexesRequest\":\n\023ListIndexesRespo"
  "nse\022#\n\007indexes\030\001 \003(\0132\022.fpindex.IndexInfo"
  "2\265\005\n\005Index\022[\n\013ListIndexes\022\033.fpindex.List"
  "IndexesRequest\032\034.fpindex.ListIndexesResp"
  "onse\"\021\202\323\344\223\002\013\022\t/v1/index\022_\n\010GetIndex\022\030.fp"
  "index.GetIndexRequest\032\031.fpindex.GetIndex"
  "Response\"\036\202\323\344\223\002\030\022\026/v1/index/{index_name}"
  "\022k\n\013CreateIndex\022\033.fpindex.CreateIndexReq"
  "uest\032\034.fpindex.CreateIndexResponse\"!\202\323\344\223"
  "\002\033\032\026/v1/index/{index_name}:\001*\022h\n\013DeleteI"
  "ndex\022\033.fpindex.DeleteIndexRequest\032\034.fpin"
  "dex.DeleteIndexResponse\"\036\202\323\344\223\002\030*\026/v1/ind"
  "ex/{index_name}\022K\n\014GetAttribute\022\034.fpinde"
  "x.GetAttributeRequest\032\035.fpindex.GetAttri"
  "buteResponse\022d\n\006Update\022\026.fpindex.UpdateR"
  "equest\032\027.fpindex.UpdateResponse\")\202\323\344\223\002#\""
  "\036/v1/index/{index_name}/_update:\001*\022d\n\006Se"
  "arch\022\026.fpindex.SearchRequest\032\027.fpindex.S"
  "earchResponse\")\202\323\344\223\002#\"\036/v1/index/{index_"
  "name}/_search:\001*b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_index_2eproto_deps[1] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_index_2eproto_sccs[20] = {
  &scc_info_CreateIndexRequest_index_2eproto.base,
  &scc_info_CreateIndexResponse_index_2eproto.base,
  &scc_info_DeleteDocumentOp_index_2eproto.base,
  &scc_info_DeleteIndexRequest_index_2eproto.base,
  &scc_info_DeleteIndexResponse_index_2eproto.base,
  &scc_info_GetAttributeRequest_index_2eproto.base,
  &scc_info_GetAttributeResponse_index_2eproto.base,
  &scc_info_GetIndexRequest_index_2eproto.base,
  &scc_info_GetIndexResponse_index_2eproto.base,
  &scc_info_IndexInfo_index_2eproto.base,
  &scc_info_InsertOrUpdateDocumentOp_index_2eproto.base,
  &scc_info_ListIndexesRequest_index_2eproto.base,
  &scc_info_ListIndexesResponse_index_2eproto.base,
  &scc_info_Operation_index_2eproto.base,
  &scc_info_SearchRequest_index_2eproto.base,
  &scc_info_SearchResponse_index_2eproto.base,
  &scc_info_SearchResult_index_2eproto.base,
  &scc_info_SetAttributeOp_index_2eproto.base,
  &scc_info_UpdateRequest_index_2eproto.base,
  &scc_info_UpdateResponse_index_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_index_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_index_2eproto = {
  false, false, descriptor_table_protodef_index_2eproto, "index.proto", 1824,
  &descriptor_table_index_2eproto_once, descriptor_table_index_2eproto_sccs, descriptor_table_index_2eproto_deps, 20, 1,
  schemas, file_default_instances, TableStruct_index_2eproto::offsets,
  file_level_metadata_index_2eproto, 20, file_level_enum_descriptors_index_2eproto, file_level_service_descriptors_index_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_index_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_index_2eproto)), true);
namespace fpindex {

// ===================================================================

void IndexInfo::InitAsDefaultInstance() {
}
class IndexInfo::_Internal {
 public:
};

IndexInfo::IndexInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fpindex.IndexInfo)
}
IndexInfo::IndexInfo(const IndexInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:fpindex.IndexInfo)
}

void IndexInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IndexInfo_index_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

IndexInfo::~IndexInfo() {
  // @@protoc_insertion_point(destructor:fpindex.IndexInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IndexInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IndexInfo::ArenaDtor(void* object) {
  IndexInfo* _this = reinterpret_cast< IndexInfo* >(object);
  (void)_this;
}
void IndexInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IndexInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IndexInfo& IndexInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IndexInfo_index_2eproto.base);
  return *internal_default_instance();
}


void IndexInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:fpindex.IndexInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IndexInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fpindex.IndexInfo.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IndexInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fpindex.IndexInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fpindex.IndexInfo.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fpindex.IndexInfo)
  return target;
}

size_t IndexInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fpindex.IndexInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IndexInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fpindex.IndexInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const IndexInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IndexInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fpindex.IndexInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fpindex.IndexInfo)
    MergeFrom(*source);
  }
}

void IndexInfo::MergeFrom(const IndexInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fpindex.IndexInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void IndexInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fpindex.IndexInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexInfo::CopyFrom(const IndexInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fpindex.IndexInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexInfo::IsInitialized() const {
  return true;
}

void IndexInfo::InternalSwap(IndexInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata IndexInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetAttributeRequest::InitAsDefaultInstance() {
}
class GetAttributeRequest::_Internal {
 public:
};

GetAttributeRequest::GetAttributeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fpindex.GetAttributeRequest)
}
GetAttributeRequest::GetAttributeRequest(const GetAttributeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  index_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_index_name().empty()) {
    index_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_index_name(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:fpindex.GetAttributeRequest)
}

void GetAttributeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAttributeRequest_index_2eproto.base);
  index_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetAttributeRequest::~GetAttributeRequest() {
  // @@protoc_insertion_point(destructor:fpindex.GetAttributeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetAttributeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  index_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetAttributeRequest::ArenaDtor(void* object) {
  GetAttributeRequest* _this = reinterpret_cast< GetAttributeRequest* >(object);
  (void)_this;
}
void GetAttributeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAttributeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAttributeRequest& GetAttributeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAttributeRequest_index_2eproto.base);
  return *internal_default_instance();
}


void GetAttributeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:fpindex.GetAttributeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  index_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAttributeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string index_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_index_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fpindex.GetAttributeRequest.index_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fpindex.GetAttributeRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAttributeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fpindex.GetAttributeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string index_name = 1;
  if (this->index_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index_name().data(), static_cast<int>(this->_internal_index_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fpindex.GetAttributeRequest.index_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_index_name(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fpindex.GetAttributeRequest.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fpindex.GetAttributeRequest)
  return target;
}

size_t GetAttributeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fpindex.GetAttributeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string index_name = 1;
  if (this->index_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index_name());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAttributeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fpindex.GetAttributeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAttributeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAttributeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fpindex.GetAttributeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fpindex.GetAttributeRequest)
    MergeFrom(*source);
  }
}

void GetAttributeRequest::MergeFrom(const GetAttributeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fpindex.GetAttributeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.index_name().size() > 0) {
    _internal_set_index_name(from._internal_index_name());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void GetAttributeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fpindex.GetAttributeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAttributeRequest::CopyFrom(const GetAttributeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fpindex.GetAttributeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAttributeRequest::IsInitialized() const {
  return true;
}

void GetAttributeRequest::InternalSwap(GetAttributeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  index_name_.Swap(&other->index_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAttributeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetAttributeResponse::InitAsDefaultInstance() {
}
class GetAttributeResponse::_Internal {
 public:
};

GetAttributeResponse::GetAttributeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fpindex.GetAttributeResponse)
}
GetAttributeResponse::GetAttributeResponse(const GetAttributeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:fpindex.GetAttributeResponse)
}

void GetAttributeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAttributeResponse_index_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetAttributeResponse::~GetAttributeResponse() {
  // @@protoc_insertion_point(destructor:fpindex.GetAttributeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetAttributeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetAttributeResponse::ArenaDtor(void* object) {
  GetAttributeResponse* _this = reinterpret_cast< GetAttributeResponse* >(object);
  (void)_this;
}
void GetAttributeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAttributeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAttributeResponse& GetAttributeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAttributeResponse_index_2eproto.base);
  return *internal_default_instance();
}


void GetAttributeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:fpindex.GetAttributeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAttributeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fpindex.GetAttributeResponse.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAttributeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fpindex.GetAttributeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 2;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fpindex.GetAttributeResponse.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fpindex.GetAttributeResponse)
  return target;
}

size_t GetAttributeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fpindex.GetAttributeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAttributeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fpindex.GetAttributeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAttributeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAttributeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fpindex.GetAttributeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fpindex.GetAttributeResponse)
    MergeFrom(*source);
  }
}

void GetAttributeResponse::MergeFrom(const GetAttributeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fpindex.GetAttributeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
}

void GetAttributeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fpindex.GetAttributeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAttributeResponse::CopyFrom(const GetAttributeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fpindex.GetAttributeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAttributeResponse::IsInitialized() const {
  return true;
}

void GetAttributeResponse::InternalSwap(GetAttributeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAttributeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InsertOrUpdateDocumentOp::InitAsDefaultInstance() {
}
class InsertOrUpdateDocumentOp::_Internal {
 public:
};

InsertOrUpdateDocumentOp::InsertOrUpdateDocumentOp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  terms_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fpindex.InsertOrUpdateDocumentOp)
}
InsertOrUpdateDocumentOp::InsertOrUpdateDocumentOp(const InsertOrUpdateDocumentOp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      terms_(from.terms_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  doc_id_ = from.doc_id_;
  // @@protoc_insertion_point(copy_constructor:fpindex.InsertOrUpdateDocumentOp)
}

void InsertOrUpdateDocumentOp::SharedCtor() {
  doc_id_ = 0u;
}

InsertOrUpdateDocumentOp::~InsertOrUpdateDocumentOp() {
  // @@protoc_insertion_point(destructor:fpindex.InsertOrUpdateDocumentOp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InsertOrUpdateDocumentOp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void InsertOrUpdateDocumentOp::ArenaDtor(void* object) {
  InsertOrUpdateDocumentOp* _this = reinterpret_cast< InsertOrUpdateDocumentOp* >(object);
  (void)_this;
}
void InsertOrUpdateDocumentOp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InsertOrUpdateDocumentOp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InsertOrUpdateDocumentOp& InsertOrUpdateDocumentOp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InsertOrUpdateDocumentOp_index_2eproto.base);
  return *internal_default_instance();
}


void InsertOrUpdateDocumentOp::Clear() {
// @@protoc_insertion_point(message_clear_start:fpindex.InsertOrUpdateDocumentOp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  terms_.Clear();
  doc_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertOrUpdateDocumentOp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 doc_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          doc_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 terms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_terms(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_terms(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InsertOrUpdateDocumentOp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fpindex.InsertOrUpdateDocumentOp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 doc_id = 1;
  if (this->doc_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_doc_id(), target);
  }

  // repeated uint32 terms = 2;
  {
    int byte_size = _terms_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_terms(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fpindex.InsertOrUpdateDocumentOp)
  return target;
}

size_t InsertOrUpdateDocumentOp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fpindex.InsertOrUpdateDocumentOp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 terms = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->terms_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _terms_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 doc_id = 1;
  if (this->doc_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_doc_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InsertOrUpdateDocumentOp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fpindex.InsertOrUpdateDocumentOp)
  GOOGLE_DCHECK_NE(&from, this);
  const InsertOrUpdateDocumentOp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InsertOrUpdateDocumentOp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fpindex.InsertOrUpdateDocumentOp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fpindex.InsertOrUpdateDocumentOp)
    MergeFrom(*source);
  }
}

void InsertOrUpdateDocumentOp::MergeFrom(const InsertOrUpdateDocumentOp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fpindex.InsertOrUpdateDocumentOp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  terms_.MergeFrom(from.terms_);
  if (from.doc_id() != 0) {
    _internal_set_doc_id(from._internal_doc_id());
  }
}

void InsertOrUpdateDocumentOp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fpindex.InsertOrUpdateDocumentOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InsertOrUpdateDocumentOp::CopyFrom(const InsertOrUpdateDocumentOp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fpindex.InsertOrUpdateDocumentOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertOrUpdateDocumentOp::IsInitialized() const {
  return true;
}

void InsertOrUpdateDocumentOp::InternalSwap(InsertOrUpdateDocumentOp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  terms_.InternalSwap(&other->terms_);
  swap(doc_id_, other->doc_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertOrUpdateDocumentOp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteDocumentOp::InitAsDefaultInstance() {
}
class DeleteDocumentOp::_Internal {
 public:
};

DeleteDocumentOp::DeleteDocumentOp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fpindex.DeleteDocumentOp)
}
DeleteDocumentOp::DeleteDocumentOp(const DeleteDocumentOp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  doc_id_ = from.doc_id_;
  // @@protoc_insertion_point(copy_constructor:fpindex.DeleteDocumentOp)
}

void DeleteDocumentOp::SharedCtor() {
  doc_id_ = 0u;
}

DeleteDocumentOp::~DeleteDocumentOp() {
  // @@protoc_insertion_point(destructor:fpindex.DeleteDocumentOp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteDocumentOp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeleteDocumentOp::ArenaDtor(void* object) {
  DeleteDocumentOp* _this = reinterpret_cast< DeleteDocumentOp* >(object);
  (void)_this;
}
void DeleteDocumentOp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteDocumentOp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteDocumentOp& DeleteDocumentOp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteDocumentOp_index_2eproto.base);
  return *internal_default_instance();
}


void DeleteDocumentOp::Clear() {
// @@protoc_insertion_point(message_clear_start:fpindex.DeleteDocumentOp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  doc_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteDocumentOp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 doc_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          doc_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteDocumentOp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fpindex.DeleteDocumentOp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 doc_id = 1;
  if (this->doc_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_doc_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fpindex.DeleteDocumentOp)
  return target;
}

size_t DeleteDocumentOp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fpindex.DeleteDocumentOp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 doc_id = 1;
  if (this->doc_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_doc_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteDocumentOp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fpindex.DeleteDocumentOp)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteDocumentOp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteDocumentOp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fpindex.DeleteDocumentOp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fpindex.DeleteDocumentOp)
    MergeFrom(*source);
  }
}

void DeleteDocumentOp::MergeFrom(const DeleteDocumentOp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fpindex.DeleteDocumentOp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.doc_id() != 0) {
    _internal_set_doc_id(from._internal_doc_id());
  }
}

void DeleteDocumentOp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fpindex.DeleteDocumentOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteDocumentOp::CopyFrom(const DeleteDocumentOp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fpindex.DeleteDocumentOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteDocumentOp::IsInitialized() const {
  return true;
}

void DeleteDocumentOp::InternalSwap(DeleteDocumentOp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(doc_id_, other->doc_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteDocumentOp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetAttributeOp::InitAsDefaultInstance() {
}
class SetAttributeOp::_Internal {
 public:
};

SetAttributeOp::SetAttributeOp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fpindex.SetAttributeOp)
}
SetAttributeOp::SetAttributeOp(const SetAttributeOp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:fpindex.SetAttributeOp)
}

void SetAttributeOp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetAttributeOp_index_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SetAttributeOp::~SetAttributeOp() {
  // @@protoc_insertion_point(destructor:fpindex.SetAttributeOp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetAttributeOp::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetAttributeOp::ArenaDtor(void* object) {
  SetAttributeOp* _this = reinterpret_cast< SetAttributeOp* >(object);
  (void)_this;
}
void SetAttributeOp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetAttributeOp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetAttributeOp& SetAttributeOp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetAttributeOp_index_2eproto.base);
  return *internal_default_instance();
}


void SetAttributeOp::Clear() {
// @@protoc_insertion_point(message_clear_start:fpindex.SetAttributeOp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetAttributeOp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fpindex.SetAttributeOp.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fpindex.SetAttributeOp.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetAttributeOp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fpindex.SetAttributeOp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fpindex.SetAttributeOp.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fpindex.SetAttributeOp.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fpindex.SetAttributeOp)
  return target;
}

size_t SetAttributeOp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fpindex.SetAttributeOp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetAttributeOp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fpindex.SetAttributeOp)
  GOOGLE_DCHECK_NE(&from, this);
  const SetAttributeOp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetAttributeOp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fpindex.SetAttributeOp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fpindex.SetAttributeOp)
    MergeFrom(*source);
  }
}

void SetAttributeOp::MergeFrom(const SetAttributeOp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fpindex.SetAttributeOp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
}

void SetAttributeOp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fpindex.SetAttributeOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetAttributeOp::CopyFrom(const SetAttributeOp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fpindex.SetAttributeOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetAttributeOp::IsInitialized() const {
  return true;
}

void SetAttributeOp::InternalSwap(SetAttributeOp* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SetAttributeOp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Operation::InitAsDefaultInstance() {
  ::fpindex::_Operation_default_instance_.insert_or_update_document_ = const_cast< ::fpindex::InsertOrUpdateDocumentOp*>(
      ::fpindex::InsertOrUpdateDocumentOp::internal_default_instance());
  ::fpindex::_Operation_default_instance_.delete_document_ = const_cast< ::fpindex::DeleteDocumentOp*>(
      ::fpindex::DeleteDocumentOp::internal_default_instance());
  ::fpindex::_Operation_default_instance_.set_attribute_ = const_cast< ::fpindex::SetAttributeOp*>(
      ::fpindex::SetAttributeOp::internal_default_instance());
}
class Operation::_Internal {
 public:
  static const ::fpindex::InsertOrUpdateDocumentOp& insert_or_update_document(const Operation* msg);
  static const ::fpindex::DeleteDocumentOp& delete_document(const Operation* msg);
  static const ::fpindex::SetAttributeOp& set_attribute(const Operation* msg);
};

const ::fpindex::InsertOrUpdateDocumentOp&
Operation::_Internal::insert_or_update_document(const Operation* msg) {
  return *msg->op_.insert_or_update_document_;
}
const ::fpindex::DeleteDocumentOp&
Operation::_Internal::delete_document(const Operation* msg) {
  return *msg->op_.delete_document_;
}
const ::fpindex::SetAttributeOp&
Operation::_Internal::set_attribute(const Operation* msg) {
  return *msg->op_.set_attribute_;
}
void Operation::set_allocated_insert_or_update_document(::fpindex::InsertOrUpdateDocumentOp* insert_or_update_document) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_op();
  if (insert_or_update_document) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(insert_or_update_document);
    if (message_arena != submessage_arena) {
      insert_or_update_document = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, insert_or_update_document, submessage_arena);
    }
    set_has_insert_or_update_document();
    op_.insert_or_update_document_ = insert_or_update_document;
  }
  // @@protoc_insertion_point(field_set_allocated:fpindex.Operation.insert_or_update_document)
}
void Operation::set_allocated_delete_document(::fpindex::DeleteDocumentOp* delete_document) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_op();
  if (delete_document) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(delete_document);
    if (message_arena != submessage_arena) {
      delete_document = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delete_document, submessage_arena);
    }
    set_has_delete_document();
    op_.delete_document_ = delete_document;
  }
  // @@protoc_insertion_point(field_set_allocated:fpindex.Operation.delete_document)
}
void Operation::set_allocated_set_attribute(::fpindex::SetAttributeOp* set_attribute) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_op();
  if (set_attribute) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(set_attribute);
    if (message_arena != submessage_arena) {
      set_attribute = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_attribute, submessage_arena);
    }
    set_has_set_attribute();
    op_.set_attribute_ = set_attribute;
  }
  // @@protoc_insertion_point(field_set_allocated:fpindex.Operation.set_attribute)
}
Operation::Operation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fpindex.Operation)
}
Operation::Operation(const Operation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_op();
  switch (from.op_case()) {
    case kInsertOrUpdateDocument: {
      _internal_mutable_insert_or_update_document()->::fpindex::InsertOrUpdateDocumentOp::MergeFrom(from._internal_insert_or_update_document());
      break;
    }
    case kDeleteDocument: {
      _internal_mutable_delete_document()->::fpindex::DeleteDocumentOp::MergeFrom(from._internal_delete_document());
      break;
    }
    case kSetAttribute: {
      _internal_mutable_set_attribute()->::fpindex::SetAttributeOp::MergeFrom(from._internal_set_attribute());
      break;
    }
    case OP_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:fpindex.Operation)
}

void Operation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Operation_index_2eproto.base);
  clear_has_op();
}

Operation::~Operation() {
  // @@protoc_insertion_point(destructor:fpindex.Operation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Operation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_op()) {
    clear_op();
  }
}

void Operation::ArenaDtor(void* object) {
  Operation* _this = reinterpret_cast< Operation* >(object);
  (void)_this;
}
void Operation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Operation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Operation& Operation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Operation_index_2eproto.base);
  return *internal_default_instance();
}


void Operation::clear_op() {
// @@protoc_insertion_point(one_of_clear_start:fpindex.Operation)
  switch (op_case()) {
    case kInsertOrUpdateDocument: {
      if (GetArena() == nullptr) {
        delete op_.insert_or_update_document_;
      }
      break;
    }
    case kDeleteDocument: {
      if (GetArena() == nullptr) {
        delete op_.delete_document_;
      }
      break;
    }
    case kSetAttribute: {
      if (GetArena() == nullptr) {
        delete op_.set_attribute_;
      }
      break;
    }
    case OP_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OP_NOT_SET;
}


void Operation::Clear() {
// @@protoc_insertion_point(message_clear_start:fpindex.Operation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_op();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Operation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .fpindex.InsertOrUpdateDocumentOp insert_or_update_document = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_insert_or_update_document(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fpindex.DeleteDocumentOp delete_document = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_delete_document(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .fpindex.SetAttributeOp set_attribute = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_attribute(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Operation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fpindex.Operation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fpindex.InsertOrUpdateDocumentOp insert_or_update_document = 1;
  if (_internal_has_insert_or_update_document()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::insert_or_update_document(this), target, stream);
  }

  // .fpindex.DeleteDocumentOp delete_document = 2;
  if (_internal_has_delete_document()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::delete_document(this), target, stream);
  }

  // .fpindex.SetAttributeOp set_attribute = 3;
  if (_internal_has_set_attribute()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::set_attribute(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fpindex.Operation)
  return target;
}

size_t Operation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fpindex.Operation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (op_case()) {
    // .fpindex.InsertOrUpdateDocumentOp insert_or_update_document = 1;
    case kInsertOrUpdateDocument: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.insert_or_update_document_);
      break;
    }
    // .fpindex.DeleteDocumentOp delete_document = 2;
    case kDeleteDocument: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.delete_document_);
      break;
    }
    // .fpindex.SetAttributeOp set_attribute = 3;
    case kSetAttribute: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_.set_attribute_);
      break;
    }
    case OP_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Operation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fpindex.Operation)
  GOOGLE_DCHECK_NE(&from, this);
  const Operation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Operation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fpindex.Operation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fpindex.Operation)
    MergeFrom(*source);
  }
}

void Operation::MergeFrom(const Operation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fpindex.Operation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.op_case()) {
    case kInsertOrUpdateDocument: {
      _internal_mutable_insert_or_update_document()->::fpindex::InsertOrUpdateDocumentOp::MergeFrom(from._internal_insert_or_update_document());
      break;
    }
    case kDeleteDocument: {
      _internal_mutable_delete_document()->::fpindex::DeleteDocumentOp::MergeFrom(from._internal_delete_document());
      break;
    }
    case kSetAttribute: {
      _internal_mutable_set_attribute()->::fpindex::SetAttributeOp::MergeFrom(from._internal_set_attribute());
      break;
    }
    case OP_NOT_SET: {
      break;
    }
  }
}

void Operation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fpindex.Operation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Operation::CopyFrom(const Operation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fpindex.Operation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Operation::IsInitialized() const {
  return true;
}

void Operation::InternalSwap(Operation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(op_, other->op_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Operation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateRequest::InitAsDefaultInstance() {
}
class UpdateRequest::_Internal {
 public:
};

UpdateRequest::UpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ops_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fpindex.UpdateRequest)
}
UpdateRequest::UpdateRequest(const UpdateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ops_(from.ops_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  index_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_index_name().empty()) {
    index_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_index_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:fpindex.UpdateRequest)
}

void UpdateRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateRequest_index_2eproto.base);
  index_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UpdateRequest::~UpdateRequest() {
  // @@protoc_insertion_point(destructor:fpindex.UpdateRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  index_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UpdateRequest::ArenaDtor(void* object) {
  UpdateRequest* _this = reinterpret_cast< UpdateRequest* >(object);
  (void)_this;
}
void UpdateRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateRequest& UpdateRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateRequest_index_2eproto.base);
  return *internal_default_instance();
}


void UpdateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:fpindex.UpdateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ops_.Clear();
  index_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string index_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_index_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fpindex.UpdateRequest.index_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .fpindex.Operation ops = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ops(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fpindex.UpdateRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string index_name = 1;
  if (this->index_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index_name().data(), static_cast<int>(this->_internal_index_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fpindex.UpdateRequest.index_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_index_name(), target);
  }

  // repeated .fpindex.Operation ops = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ops_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_ops(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fpindex.UpdateRequest)
  return target;
}

size_t UpdateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fpindex.UpdateRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .fpindex.Operation ops = 2;
  total_size += 1UL * this->_internal_ops_size();
  for (const auto& msg : this->ops_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string index_name = 1;
  if (this->index_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fpindex.UpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fpindex.UpdateRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fpindex.UpdateRequest)
    MergeFrom(*source);
  }
}

void UpdateRequest::MergeFrom(const UpdateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fpindex.UpdateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ops_.MergeFrom(from.ops_);
  if (from.index_name().size() > 0) {
    _internal_set_index_name(from._internal_index_name());
  }
}

void UpdateRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fpindex.UpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateRequest::CopyFrom(const UpdateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fpindex.UpdateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateRequest::IsInitialized() const {
  return true;
}

void UpdateRequest::InternalSwap(UpdateRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ops_.InternalSwap(&other->ops_);
  index_name_.Swap(&other->index_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateResponse::InitAsDefaultInstance() {
}
class UpdateResponse::_Internal {
 public:
};

UpdateResponse::UpdateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fpindex.UpdateResponse)
}
UpdateResponse::UpdateResponse(const UpdateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fpindex.UpdateResponse)
}

void UpdateResponse::SharedCtor() {
}

UpdateResponse::~UpdateResponse() {
  // @@protoc_insertion_point(destructor:fpindex.UpdateResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UpdateResponse::ArenaDtor(void* object) {
  UpdateResponse* _this = reinterpret_cast< UpdateResponse* >(object);
  (void)_this;
}
void UpdateResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateResponse& UpdateResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateResponse_index_2eproto.base);
  return *internal_default_instance();
}


void UpdateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:fpindex.UpdateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fpindex.UpdateResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fpindex.UpdateResponse)
  return target;
}

size_t UpdateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fpindex.UpdateResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fpindex.UpdateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fpindex.UpdateResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fpindex.UpdateResponse)
    MergeFrom(*source);
  }
}

void UpdateResponse::MergeFrom(const UpdateResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fpindex.UpdateResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UpdateResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fpindex.UpdateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateResponse::CopyFrom(const UpdateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fpindex.UpdateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateResponse::IsInitialized() const {
  return true;
}

void UpdateResponse::InternalSwap(UpdateResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SearchResult::InitAsDefaultInstance() {
}
class SearchResult::_Internal {
 public:
};

SearchResult::SearchResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fpindex.SearchResult)
}
SearchResult::SearchResult(const SearchResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&doc_id_, &from.doc_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&doc_id_)) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:fpindex.SearchResult)
}

void SearchResult::SharedCtor() {
  ::memset(&doc_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&doc_id_)) + sizeof(score_));
}

SearchResult::~SearchResult() {
  // @@protoc_insertion_point(destructor:fpindex.SearchResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SearchResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SearchResult::ArenaDtor(void* object) {
  SearchResult* _this = reinterpret_cast< SearchResult* >(object);
  (void)_this;
}
void SearchResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SearchResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SearchResult& SearchResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SearchResult_index_2eproto.base);
  return *internal_default_instance();
}


void SearchResult::Clear() {
// @@protoc_insertion_point(message_clear_start:fpindex.SearchResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&doc_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&doc_id_)) + sizeof(score_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 doc_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          doc_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float score = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SearchResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fpindex.SearchResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 doc_id = 1;
  if (this->doc_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_doc_id(), target);
  }

  // float score = 2;
  if (!(this->score() <= 0 && this->score() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fpindex.SearchResult)
  return target;
}

size_t SearchResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fpindex.SearchResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 doc_id = 1;
  if (this->doc_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_doc_id());
  }

  // float score = 2;
  if (!(this->score() <= 0 && this->score() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SearchResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fpindex.SearchResult)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SearchResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fpindex.SearchResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fpindex.SearchResult)
    MergeFrom(*source);
  }
}

void SearchResult::MergeFrom(const SearchResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fpindex.SearchResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.doc_id() != 0) {
    _internal_set_doc_id(from._internal_doc_id());
  }
  if (!(from.score() <= 0 && from.score() >= 0)) {
    _internal_set_score(from._internal_score());
  }
}

void SearchResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fpindex.SearchResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchResult::CopyFrom(const SearchResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fpindex.SearchResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchResult::IsInitialized() const {
  return true;
}

void SearchResult::InternalSwap(SearchResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SearchResult, score_)
      + sizeof(SearchResult::score_)
      - PROTOBUF_FIELD_OFFSET(SearchResult, doc_id_)>(
          reinterpret_cast<char*>(&doc_id_),
          reinterpret_cast<char*>(&other->doc_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SearchRequest::InitAsDefaultInstance() {
}
class SearchRequest::_Internal {
 public:
};

SearchRequest::SearchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  terms_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fpindex.SearchRequest)
}
SearchRequest::SearchRequest(const SearchRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      terms_(from.terms_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  index_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_index_name().empty()) {
    index_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_index_name(),
      GetArena());
  }
  max_results_ = from.max_results_;
  // @@protoc_insertion_point(copy_constructor:fpindex.SearchRequest)
}

void SearchRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SearchRequest_index_2eproto.base);
  index_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  max_results_ = 0;
}

SearchRequest::~SearchRequest() {
  // @@protoc_insertion_point(destructor:fpindex.SearchRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SearchRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  index_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SearchRequest::ArenaDtor(void* object) {
  SearchRequest* _this = reinterpret_cast< SearchRequest* >(object);
  (void)_this;
}
void SearchRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SearchRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SearchRequest& SearchRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SearchRequest_index_2eproto.base);
  return *internal_default_instance();
}


void SearchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:fpindex.SearchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  terms_.Clear();
  index_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  max_results_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string index_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_index_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fpindex.SearchRequest.index_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 terms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_terms(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_terms(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_results = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          max_results_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SearchRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fpindex.SearchRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string index_name = 1;
  if (this->index_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index_name().data(), static_cast<int>(this->_internal_index_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fpindex.SearchRequest.index_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_index_name(), target);
  }

  // repeated uint32 terms = 2;
  {
    int byte_size = _terms_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_terms(), byte_size, target);
    }
  }

  // int32 max_results = 3;
  if (this->max_results() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_max_results(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fpindex.SearchRequest)
  return target;
}

size_t SearchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fpindex.SearchRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 terms = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->terms_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _terms_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string index_name = 1;
  if (this->index_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index_name());
  }

  // int32 max_results = 3;
  if (this->max_results() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_results());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SearchRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fpindex.SearchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SearchRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fpindex.SearchRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fpindex.SearchRequest)
    MergeFrom(*source);
  }
}

void SearchRequest::MergeFrom(const SearchRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fpindex.SearchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  terms_.MergeFrom(from.terms_);
  if (from.index_name().size() > 0) {
    _internal_set_index_name(from._internal_index_name());
  }
  if (from.max_results() != 0) {
    _internal_set_max_results(from._internal_max_results());
  }
}

void SearchRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fpindex.SearchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchRequest::CopyFrom(const SearchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fpindex.SearchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchRequest::IsInitialized() const {
  return true;
}

void SearchRequest::InternalSwap(SearchRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  terms_.InternalSwap(&other->terms_);
  index_name_.Swap(&other->index_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(max_results_, other->max_results_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SearchResponse::InitAsDefaultInstance() {
}
class SearchResponse::_Internal {
 public:
};

SearchResponse::SearchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  results_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fpindex.SearchResponse)
}
SearchResponse::SearchResponse(const SearchResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      results_(from.results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fpindex.SearchResponse)
}

void SearchResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SearchResponse_index_2eproto.base);
}

SearchResponse::~SearchResponse() {
  // @@protoc_insertion_point(destructor:fpindex.SearchResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SearchResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SearchResponse::ArenaDtor(void* object) {
  SearchResponse* _this = reinterpret_cast< SearchResponse* >(object);
  (void)_this;
}
void SearchResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SearchResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SearchResponse& SearchResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SearchResponse_index_2eproto.base);
  return *internal_default_instance();
}


void SearchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:fpindex.SearchResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .fpindex.SearchResult results = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SearchResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fpindex.SearchResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .fpindex.SearchResult results = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_results(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fpindex.SearchResponse)
  return target;
}

size_t SearchResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fpindex.SearchResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .fpindex.SearchResult results = 1;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SearchResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fpindex.SearchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SearchResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fpindex.SearchResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fpindex.SearchResponse)
    MergeFrom(*source);
  }
}

void SearchResponse::MergeFrom(const SearchResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fpindex.SearchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
}

void SearchResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fpindex.SearchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchResponse::CopyFrom(const SearchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fpindex.SearchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchResponse::IsInitialized() const {
  return true;
}

void SearchResponse::InternalSwap(SearchResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  results_.InternalSwap(&other->results_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetIndexRequest::InitAsDefaultInstance() {
}
class GetIndexRequest::_Internal {
 public:
};

GetIndexRequest::GetIndexRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fpindex.GetIndexRequest)
}
GetIndexRequest::GetIndexRequest(const GetIndexRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  index_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_index_name().empty()) {
    index_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_index_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:fpindex.GetIndexRequest)
}

void GetIndexRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetIndexRequest_index_2eproto.base);
  index_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetIndexRequest::~GetIndexRequest() {
  // @@protoc_insertion_point(destructor:fpindex.GetIndexRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetIndexRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  index_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetIndexRequest::ArenaDtor(void* object) {
  GetIndexRequest* _this = reinterpret_cast< GetIndexRequest* >(object);
  (void)_this;
}
void GetIndexRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetIndexRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetIndexRequest& GetIndexRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetIndexRequest_index_2eproto.base);
  return *internal_default_instance();
}


void GetIndexRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:fpindex.GetIndexRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  index_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetIndexRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string index_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_index_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fpindex.GetIndexRequest.index_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetIndexRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fpindex.GetIndexRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string index_name = 1;
  if (this->index_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index_name().data(), static_cast<int>(this->_internal_index_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fpindex.GetIndexRequest.index_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_index_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fpindex.GetIndexRequest)
  return target;
}

size_t GetIndexRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fpindex.GetIndexRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string index_name = 1;
  if (this->index_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetIndexRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fpindex.GetIndexRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetIndexRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetIndexRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fpindex.GetIndexRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fpindex.GetIndexRequest)
    MergeFrom(*source);
  }
}

void GetIndexRequest::MergeFrom(const GetIndexRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fpindex.GetIndexRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.index_name().size() > 0) {
    _internal_set_index_name(from._internal_index_name());
  }
}

void GetIndexRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fpindex.GetIndexRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetIndexRequest::CopyFrom(const GetIndexRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fpindex.GetIndexRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetIndexRequest::IsInitialized() const {
  return true;
}

void GetIndexRequest::InternalSwap(GetIndexRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  index_name_.Swap(&other->index_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetIndexRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetIndexResponse::InitAsDefaultInstance() {
  ::fpindex::_GetIndexResponse_default_instance_._instance.get_mutable()->index_ = const_cast< ::fpindex::IndexInfo*>(
      ::fpindex::IndexInfo::internal_default_instance());
}
class GetIndexResponse::_Internal {
 public:
  static const ::fpindex::IndexInfo& index(const GetIndexResponse* msg);
};

const ::fpindex::IndexInfo&
GetIndexResponse::_Internal::index(const GetIndexResponse* msg) {
  return *msg->index_;
}
GetIndexResponse::GetIndexResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fpindex.GetIndexResponse)
}
GetIndexResponse::GetIndexResponse(const GetIndexResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_index()) {
    index_ = new ::fpindex::IndexInfo(*from.index_);
  } else {
    index_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:fpindex.GetIndexResponse)
}

void GetIndexResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetIndexResponse_index_2eproto.base);
  index_ = nullptr;
}

GetIndexResponse::~GetIndexResponse() {
  // @@protoc_insertion_point(destructor:fpindex.GetIndexResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetIndexResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete index_;
}

void GetIndexResponse::ArenaDtor(void* object) {
  GetIndexResponse* _this = reinterpret_cast< GetIndexResponse* >(object);
  (void)_this;
}
void GetIndexResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetIndexResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetIndexResponse& GetIndexResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetIndexResponse_index_2eproto.base);
  return *internal_default_instance();
}


void GetIndexResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:fpindex.GetIndexResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && index_ != nullptr) {
    delete index_;
  }
  index_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetIndexResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .fpindex.IndexInfo index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_index(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetIndexResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fpindex.GetIndexResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fpindex.IndexInfo index = 1;
  if (this->has_index()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::index(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fpindex.GetIndexResponse)
  return target;
}

size_t GetIndexResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fpindex.GetIndexResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .fpindex.IndexInfo index = 1;
  if (this->has_index()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *index_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetIndexResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fpindex.GetIndexResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetIndexResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetIndexResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fpindex.GetIndexResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fpindex.GetIndexResponse)
    MergeFrom(*source);
  }
}

void GetIndexResponse::MergeFrom(const GetIndexResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fpindex.GetIndexResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_index()) {
    _internal_mutable_index()->::fpindex::IndexInfo::MergeFrom(from._internal_index());
  }
}

void GetIndexResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fpindex.GetIndexResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetIndexResponse::CopyFrom(const GetIndexResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fpindex.GetIndexResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetIndexResponse::IsInitialized() const {
  return true;
}

void GetIndexResponse::InternalSwap(GetIndexResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(index_, other->index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetIndexResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateIndexRequest::InitAsDefaultInstance() {
}
class CreateIndexRequest::_Internal {
 public:
};

CreateIndexRequest::CreateIndexRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fpindex.CreateIndexRequest)
}
CreateIndexRequest::CreateIndexRequest(const CreateIndexRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  index_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_index_name().empty()) {
    index_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_index_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:fpindex.CreateIndexRequest)
}

void CreateIndexRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateIndexRequest_index_2eproto.base);
  index_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CreateIndexRequest::~CreateIndexRequest() {
  // @@protoc_insertion_point(destructor:fpindex.CreateIndexRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateIndexRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  index_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateIndexRequest::ArenaDtor(void* object) {
  CreateIndexRequest* _this = reinterpret_cast< CreateIndexRequest* >(object);
  (void)_this;
}
void CreateIndexRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateIndexRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateIndexRequest& CreateIndexRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateIndexRequest_index_2eproto.base);
  return *internal_default_instance();
}


void CreateIndexRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:fpindex.CreateIndexRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  index_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateIndexRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string index_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_index_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fpindex.CreateIndexRequest.index_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateIndexRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fpindex.CreateIndexRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string index_name = 1;
  if (this->index_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index_name().data(), static_cast<int>(this->_internal_index_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fpindex.CreateIndexRequest.index_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_index_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fpindex.CreateIndexRequest)
  return target;
}

size_t CreateIndexRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fpindex.CreateIndexRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string index_name = 1;
  if (this->index_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateIndexRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fpindex.CreateIndexRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateIndexRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateIndexRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fpindex.CreateIndexRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fpindex.CreateIndexRequest)
    MergeFrom(*source);
  }
}

void CreateIndexRequest::MergeFrom(const CreateIndexRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fpindex.CreateIndexRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.index_name().size() > 0) {
    _internal_set_index_name(from._internal_index_name());
  }
}

void CreateIndexRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fpindex.CreateIndexRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateIndexRequest::CopyFrom(const CreateIndexRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fpindex.CreateIndexRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateIndexRequest::IsInitialized() const {
  return true;
}

void CreateIndexRequest::InternalSwap(CreateIndexRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  index_name_.Swap(&other->index_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateIndexRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateIndexResponse::InitAsDefaultInstance() {
  ::fpindex::_CreateIndexResponse_default_instance_._instance.get_mutable()->index_ = const_cast< ::fpindex::IndexInfo*>(
      ::fpindex::IndexInfo::internal_default_instance());
}
class CreateIndexResponse::_Internal {
 public:
  static const ::fpindex::IndexInfo& index(const CreateIndexResponse* msg);
};

const ::fpindex::IndexInfo&
CreateIndexResponse::_Internal::index(const CreateIndexResponse* msg) {
  return *msg->index_;
}
CreateIndexResponse::CreateIndexResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fpindex.CreateIndexResponse)
}
CreateIndexResponse::CreateIndexResponse(const CreateIndexResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_index()) {
    index_ = new ::fpindex::IndexInfo(*from.index_);
  } else {
    index_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:fpindex.CreateIndexResponse)
}

void CreateIndexResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateIndexResponse_index_2eproto.base);
  index_ = nullptr;
}

CreateIndexResponse::~CreateIndexResponse() {
  // @@protoc_insertion_point(destructor:fpindex.CreateIndexResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateIndexResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete index_;
}

void CreateIndexResponse::ArenaDtor(void* object) {
  CreateIndexResponse* _this = reinterpret_cast< CreateIndexResponse* >(object);
  (void)_this;
}
void CreateIndexResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateIndexResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateIndexResponse& CreateIndexResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateIndexResponse_index_2eproto.base);
  return *internal_default_instance();
}


void CreateIndexResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:fpindex.CreateIndexResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && index_ != nullptr) {
    delete index_;
  }
  index_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateIndexResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .fpindex.IndexInfo index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_index(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateIndexResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fpindex.CreateIndexResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .fpindex.IndexInfo index = 1;
  if (this->has_index()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::index(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fpindex.CreateIndexResponse)
  return target;
}

size_t CreateIndexResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fpindex.CreateIndexResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .fpindex.IndexInfo index = 1;
  if (this->has_index()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *index_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateIndexResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fpindex.CreateIndexResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateIndexResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateIndexResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fpindex.CreateIndexResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fpindex.CreateIndexResponse)
    MergeFrom(*source);
  }
}

void CreateIndexResponse::MergeFrom(const CreateIndexResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fpindex.CreateIndexResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_index()) {
    _internal_mutable_index()->::fpindex::IndexInfo::MergeFrom(from._internal_index());
  }
}

void CreateIndexResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fpindex.CreateIndexResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateIndexResponse::CopyFrom(const CreateIndexResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fpindex.CreateIndexResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateIndexResponse::IsInitialized() const {
  return true;
}

void CreateIndexResponse::InternalSwap(CreateIndexResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(index_, other->index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateIndexResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteIndexRequest::InitAsDefaultInstance() {
}
class DeleteIndexRequest::_Internal {
 public:
};

DeleteIndexRequest::DeleteIndexRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fpindex.DeleteIndexRequest)
}
DeleteIndexRequest::DeleteIndexRequest(const DeleteIndexRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  index_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_index_name().empty()) {
    index_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_index_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:fpindex.DeleteIndexRequest)
}

void DeleteIndexRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteIndexRequest_index_2eproto.base);
  index_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteIndexRequest::~DeleteIndexRequest() {
  // @@protoc_insertion_point(destructor:fpindex.DeleteIndexRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteIndexRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  index_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteIndexRequest::ArenaDtor(void* object) {
  DeleteIndexRequest* _this = reinterpret_cast< DeleteIndexRequest* >(object);
  (void)_this;
}
void DeleteIndexRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteIndexRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteIndexRequest& DeleteIndexRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteIndexRequest_index_2eproto.base);
  return *internal_default_instance();
}


void DeleteIndexRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:fpindex.DeleteIndexRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  index_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteIndexRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string index_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_index_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fpindex.DeleteIndexRequest.index_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteIndexRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fpindex.DeleteIndexRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string index_name = 1;
  if (this->index_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_index_name().data(), static_cast<int>(this->_internal_index_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "fpindex.DeleteIndexRequest.index_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_index_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fpindex.DeleteIndexRequest)
  return target;
}

size_t DeleteIndexRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fpindex.DeleteIndexRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string index_name = 1;
  if (this->index_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_index_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteIndexRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fpindex.DeleteIndexRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteIndexRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteIndexRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fpindex.DeleteIndexRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fpindex.DeleteIndexRequest)
    MergeFrom(*source);
  }
}

void DeleteIndexRequest::MergeFrom(const DeleteIndexRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fpindex.DeleteIndexRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.index_name().size() > 0) {
    _internal_set_index_name(from._internal_index_name());
  }
}

void DeleteIndexRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fpindex.DeleteIndexRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteIndexRequest::CopyFrom(const DeleteIndexRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fpindex.DeleteIndexRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteIndexRequest::IsInitialized() const {
  return true;
}

void DeleteIndexRequest::InternalSwap(DeleteIndexRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  index_name_.Swap(&other->index_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteIndexRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteIndexResponse::InitAsDefaultInstance() {
}
class DeleteIndexResponse::_Internal {
 public:
};

DeleteIndexResponse::DeleteIndexResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fpindex.DeleteIndexResponse)
}
DeleteIndexResponse::DeleteIndexResponse(const DeleteIndexResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fpindex.DeleteIndexResponse)
}

void DeleteIndexResponse::SharedCtor() {
}

DeleteIndexResponse::~DeleteIndexResponse() {
  // @@protoc_insertion_point(destructor:fpindex.DeleteIndexResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteIndexResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeleteIndexResponse::ArenaDtor(void* object) {
  DeleteIndexResponse* _this = reinterpret_cast< DeleteIndexResponse* >(object);
  (void)_this;
}
void DeleteIndexResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteIndexResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteIndexResponse& DeleteIndexResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteIndexResponse_index_2eproto.base);
  return *internal_default_instance();
}


void DeleteIndexResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:fpindex.DeleteIndexResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteIndexResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteIndexResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fpindex.DeleteIndexResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fpindex.DeleteIndexResponse)
  return target;
}

size_t DeleteIndexResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fpindex.DeleteIndexResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteIndexResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fpindex.DeleteIndexResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteIndexResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteIndexResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fpindex.DeleteIndexResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fpindex.DeleteIndexResponse)
    MergeFrom(*source);
  }
}

void DeleteIndexResponse::MergeFrom(const DeleteIndexResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fpindex.DeleteIndexResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeleteIndexResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fpindex.DeleteIndexResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteIndexResponse::CopyFrom(const DeleteIndexResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fpindex.DeleteIndexResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteIndexResponse::IsInitialized() const {
  return true;
}

void DeleteIndexResponse::InternalSwap(DeleteIndexResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteIndexResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListIndexesRequest::InitAsDefaultInstance() {
}
class ListIndexesRequest::_Internal {
 public:
};

ListIndexesRequest::ListIndexesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fpindex.ListIndexesRequest)
}
ListIndexesRequest::ListIndexesRequest(const ListIndexesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fpindex.ListIndexesRequest)
}

void ListIndexesRequest::SharedCtor() {
}

ListIndexesRequest::~ListIndexesRequest() {
  // @@protoc_insertion_point(destructor:fpindex.ListIndexesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListIndexesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListIndexesRequest::ArenaDtor(void* object) {
  ListIndexesRequest* _this = reinterpret_cast< ListIndexesRequest* >(object);
  (void)_this;
}
void ListIndexesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListIndexesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListIndexesRequest& ListIndexesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListIndexesRequest_index_2eproto.base);
  return *internal_default_instance();
}


void ListIndexesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:fpindex.ListIndexesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListIndexesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListIndexesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fpindex.ListIndexesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fpindex.ListIndexesRequest)
  return target;
}

size_t ListIndexesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fpindex.ListIndexesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListIndexesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fpindex.ListIndexesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListIndexesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListIndexesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fpindex.ListIndexesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fpindex.ListIndexesRequest)
    MergeFrom(*source);
  }
}

void ListIndexesRequest::MergeFrom(const ListIndexesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fpindex.ListIndexesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ListIndexesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fpindex.ListIndexesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListIndexesRequest::CopyFrom(const ListIndexesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fpindex.ListIndexesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListIndexesRequest::IsInitialized() const {
  return true;
}

void ListIndexesRequest::InternalSwap(ListIndexesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListIndexesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListIndexesResponse::InitAsDefaultInstance() {
}
class ListIndexesResponse::_Internal {
 public:
};

ListIndexesResponse::ListIndexesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  indexes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fpindex.ListIndexesResponse)
}
ListIndexesResponse::ListIndexesResponse(const ListIndexesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      indexes_(from.indexes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fpindex.ListIndexesResponse)
}

void ListIndexesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListIndexesResponse_index_2eproto.base);
}

ListIndexesResponse::~ListIndexesResponse() {
  // @@protoc_insertion_point(destructor:fpindex.ListIndexesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListIndexesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListIndexesResponse::ArenaDtor(void* object) {
  ListIndexesResponse* _this = reinterpret_cast< ListIndexesResponse* >(object);
  (void)_this;
}
void ListIndexesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListIndexesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListIndexesResponse& ListIndexesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListIndexesResponse_index_2eproto.base);
  return *internal_default_instance();
}


void ListIndexesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:fpindex.ListIndexesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  indexes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListIndexesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .fpindex.IndexInfo indexes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_indexes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListIndexesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fpindex.ListIndexesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .fpindex.IndexInfo indexes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_indexes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_indexes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fpindex.ListIndexesResponse)
  return target;
}

size_t ListIndexesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fpindex.ListIndexesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .fpindex.IndexInfo indexes = 1;
  total_size += 1UL * this->_internal_indexes_size();
  for (const auto& msg : this->indexes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListIndexesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fpindex.ListIndexesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListIndexesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListIndexesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fpindex.ListIndexesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fpindex.ListIndexesResponse)
    MergeFrom(*source);
  }
}

void ListIndexesResponse::MergeFrom(const ListIndexesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fpindex.ListIndexesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  indexes_.MergeFrom(from.indexes_);
}

void ListIndexesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fpindex.ListIndexesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListIndexesResponse::CopyFrom(const ListIndexesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fpindex.ListIndexesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListIndexesResponse::IsInitialized() const {
  return true;
}

void ListIndexesResponse::InternalSwap(ListIndexesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  indexes_.InternalSwap(&other->indexes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListIndexesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace fpindex
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::fpindex::IndexInfo* Arena::CreateMaybeMessage< ::fpindex::IndexInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fpindex::IndexInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::fpindex::GetAttributeRequest* Arena::CreateMaybeMessage< ::fpindex::GetAttributeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fpindex::GetAttributeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::fpindex::GetAttributeResponse* Arena::CreateMaybeMessage< ::fpindex::GetAttributeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fpindex::GetAttributeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::fpindex::InsertOrUpdateDocumentOp* Arena::CreateMaybeMessage< ::fpindex::InsertOrUpdateDocumentOp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fpindex::InsertOrUpdateDocumentOp >(arena);
}
template<> PROTOBUF_NOINLINE ::fpindex::DeleteDocumentOp* Arena::CreateMaybeMessage< ::fpindex::DeleteDocumentOp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fpindex::DeleteDocumentOp >(arena);
}
template<> PROTOBUF_NOINLINE ::fpindex::SetAttributeOp* Arena::CreateMaybeMessage< ::fpindex::SetAttributeOp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fpindex::SetAttributeOp >(arena);
}
template<> PROTOBUF_NOINLINE ::fpindex::Operation* Arena::CreateMaybeMessage< ::fpindex::Operation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fpindex::Operation >(arena);
}
template<> PROTOBUF_NOINLINE ::fpindex::UpdateRequest* Arena::CreateMaybeMessage< ::fpindex::UpdateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fpindex::UpdateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::fpindex::UpdateResponse* Arena::CreateMaybeMessage< ::fpindex::UpdateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fpindex::UpdateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::fpindex::SearchResult* Arena::CreateMaybeMessage< ::fpindex::SearchResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fpindex::SearchResult >(arena);
}
template<> PROTOBUF_NOINLINE ::fpindex::SearchRequest* Arena::CreateMaybeMessage< ::fpindex::SearchRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fpindex::SearchRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::fpindex::SearchResponse* Arena::CreateMaybeMessage< ::fpindex::SearchResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fpindex::SearchResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::fpindex::GetIndexRequest* Arena::CreateMaybeMessage< ::fpindex::GetIndexRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fpindex::GetIndexRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::fpindex::GetIndexResponse* Arena::CreateMaybeMessage< ::fpindex::GetIndexResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fpindex::GetIndexResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::fpindex::CreateIndexRequest* Arena::CreateMaybeMessage< ::fpindex::CreateIndexRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fpindex::CreateIndexRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::fpindex::CreateIndexResponse* Arena::CreateMaybeMessage< ::fpindex::CreateIndexResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fpindex::CreateIndexResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::fpindex::DeleteIndexRequest* Arena::CreateMaybeMessage< ::fpindex::DeleteIndexRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fpindex::DeleteIndexRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::fpindex::DeleteIndexResponse* Arena::CreateMaybeMessage< ::fpindex::DeleteIndexResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fpindex::DeleteIndexResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::fpindex::ListIndexesRequest* Arena::CreateMaybeMessage< ::fpindex::ListIndexesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fpindex::ListIndexesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::fpindex::ListIndexesResponse* Arena::CreateMaybeMessage< ::fpindex::ListIndexesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fpindex::ListIndexesResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
