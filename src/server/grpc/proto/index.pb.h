// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: index.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_index_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_index_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_index_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_index_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[20]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_index_2eproto;
namespace fpindex {
class CreateIndexRequest;
class CreateIndexRequestDefaultTypeInternal;
extern CreateIndexRequestDefaultTypeInternal _CreateIndexRequest_default_instance_;
class CreateIndexResponse;
class CreateIndexResponseDefaultTypeInternal;
extern CreateIndexResponseDefaultTypeInternal _CreateIndexResponse_default_instance_;
class DeleteDocumentOp;
class DeleteDocumentOpDefaultTypeInternal;
extern DeleteDocumentOpDefaultTypeInternal _DeleteDocumentOp_default_instance_;
class DeleteIndexRequest;
class DeleteIndexRequestDefaultTypeInternal;
extern DeleteIndexRequestDefaultTypeInternal _DeleteIndexRequest_default_instance_;
class DeleteIndexResponse;
class DeleteIndexResponseDefaultTypeInternal;
extern DeleteIndexResponseDefaultTypeInternal _DeleteIndexResponse_default_instance_;
class GetAttributeRequest;
class GetAttributeRequestDefaultTypeInternal;
extern GetAttributeRequestDefaultTypeInternal _GetAttributeRequest_default_instance_;
class GetAttributeResponse;
class GetAttributeResponseDefaultTypeInternal;
extern GetAttributeResponseDefaultTypeInternal _GetAttributeResponse_default_instance_;
class GetIndexRequest;
class GetIndexRequestDefaultTypeInternal;
extern GetIndexRequestDefaultTypeInternal _GetIndexRequest_default_instance_;
class GetIndexResponse;
class GetIndexResponseDefaultTypeInternal;
extern GetIndexResponseDefaultTypeInternal _GetIndexResponse_default_instance_;
class IndexInfo;
class IndexInfoDefaultTypeInternal;
extern IndexInfoDefaultTypeInternal _IndexInfo_default_instance_;
class InsertOrUpdateDocumentOp;
class InsertOrUpdateDocumentOpDefaultTypeInternal;
extern InsertOrUpdateDocumentOpDefaultTypeInternal _InsertOrUpdateDocumentOp_default_instance_;
class ListIndexesRequest;
class ListIndexesRequestDefaultTypeInternal;
extern ListIndexesRequestDefaultTypeInternal _ListIndexesRequest_default_instance_;
class ListIndexesResponse;
class ListIndexesResponseDefaultTypeInternal;
extern ListIndexesResponseDefaultTypeInternal _ListIndexesResponse_default_instance_;
class Operation;
class OperationDefaultTypeInternal;
extern OperationDefaultTypeInternal _Operation_default_instance_;
class SearchRequest;
class SearchRequestDefaultTypeInternal;
extern SearchRequestDefaultTypeInternal _SearchRequest_default_instance_;
class SearchResponse;
class SearchResponseDefaultTypeInternal;
extern SearchResponseDefaultTypeInternal _SearchResponse_default_instance_;
class SearchResult;
class SearchResultDefaultTypeInternal;
extern SearchResultDefaultTypeInternal _SearchResult_default_instance_;
class SetAttributeOp;
class SetAttributeOpDefaultTypeInternal;
extern SetAttributeOpDefaultTypeInternal _SetAttributeOp_default_instance_;
class UpdateRequest;
class UpdateRequestDefaultTypeInternal;
extern UpdateRequestDefaultTypeInternal _UpdateRequest_default_instance_;
class UpdateResponse;
class UpdateResponseDefaultTypeInternal;
extern UpdateResponseDefaultTypeInternal _UpdateResponse_default_instance_;
}  // namespace fpindex
PROTOBUF_NAMESPACE_OPEN
template<> ::fpindex::CreateIndexRequest* Arena::CreateMaybeMessage<::fpindex::CreateIndexRequest>(Arena*);
template<> ::fpindex::CreateIndexResponse* Arena::CreateMaybeMessage<::fpindex::CreateIndexResponse>(Arena*);
template<> ::fpindex::DeleteDocumentOp* Arena::CreateMaybeMessage<::fpindex::DeleteDocumentOp>(Arena*);
template<> ::fpindex::DeleteIndexRequest* Arena::CreateMaybeMessage<::fpindex::DeleteIndexRequest>(Arena*);
template<> ::fpindex::DeleteIndexResponse* Arena::CreateMaybeMessage<::fpindex::DeleteIndexResponse>(Arena*);
template<> ::fpindex::GetAttributeRequest* Arena::CreateMaybeMessage<::fpindex::GetAttributeRequest>(Arena*);
template<> ::fpindex::GetAttributeResponse* Arena::CreateMaybeMessage<::fpindex::GetAttributeResponse>(Arena*);
template<> ::fpindex::GetIndexRequest* Arena::CreateMaybeMessage<::fpindex::GetIndexRequest>(Arena*);
template<> ::fpindex::GetIndexResponse* Arena::CreateMaybeMessage<::fpindex::GetIndexResponse>(Arena*);
template<> ::fpindex::IndexInfo* Arena::CreateMaybeMessage<::fpindex::IndexInfo>(Arena*);
template<> ::fpindex::InsertOrUpdateDocumentOp* Arena::CreateMaybeMessage<::fpindex::InsertOrUpdateDocumentOp>(Arena*);
template<> ::fpindex::ListIndexesRequest* Arena::CreateMaybeMessage<::fpindex::ListIndexesRequest>(Arena*);
template<> ::fpindex::ListIndexesResponse* Arena::CreateMaybeMessage<::fpindex::ListIndexesResponse>(Arena*);
template<> ::fpindex::Operation* Arena::CreateMaybeMessage<::fpindex::Operation>(Arena*);
template<> ::fpindex::SearchRequest* Arena::CreateMaybeMessage<::fpindex::SearchRequest>(Arena*);
template<> ::fpindex::SearchResponse* Arena::CreateMaybeMessage<::fpindex::SearchResponse>(Arena*);
template<> ::fpindex::SearchResult* Arena::CreateMaybeMessage<::fpindex::SearchResult>(Arena*);
template<> ::fpindex::SetAttributeOp* Arena::CreateMaybeMessage<::fpindex::SetAttributeOp>(Arena*);
template<> ::fpindex::UpdateRequest* Arena::CreateMaybeMessage<::fpindex::UpdateRequest>(Arena*);
template<> ::fpindex::UpdateResponse* Arena::CreateMaybeMessage<::fpindex::UpdateResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace fpindex {

// ===================================================================

class IndexInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fpindex.IndexInfo) */ {
 public:
  inline IndexInfo() : IndexInfo(nullptr) {};
  virtual ~IndexInfo();

  IndexInfo(const IndexInfo& from);
  IndexInfo(IndexInfo&& from) noexcept
    : IndexInfo() {
    *this = ::std::move(from);
  }

  inline IndexInfo& operator=(const IndexInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline IndexInfo& operator=(IndexInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IndexInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IndexInfo* internal_default_instance() {
    return reinterpret_cast<const IndexInfo*>(
               &_IndexInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IndexInfo& a, IndexInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(IndexInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IndexInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IndexInfo* New() const final {
    return CreateMaybeMessage<IndexInfo>(nullptr);
  }

  IndexInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IndexInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IndexInfo& from);
  void MergeFrom(const IndexInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndexInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fpindex.IndexInfo";
  }
  protected:
  explicit IndexInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_index_2eproto);
    return ::descriptor_table_index_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:fpindex.IndexInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_index_2eproto;
};
// -------------------------------------------------------------------

class GetAttributeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fpindex.GetAttributeRequest) */ {
 public:
  inline GetAttributeRequest() : GetAttributeRequest(nullptr) {};
  virtual ~GetAttributeRequest();

  GetAttributeRequest(const GetAttributeRequest& from);
  GetAttributeRequest(GetAttributeRequest&& from) noexcept
    : GetAttributeRequest() {
    *this = ::std::move(from);
  }

  inline GetAttributeRequest& operator=(const GetAttributeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAttributeRequest& operator=(GetAttributeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAttributeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAttributeRequest* internal_default_instance() {
    return reinterpret_cast<const GetAttributeRequest*>(
               &_GetAttributeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetAttributeRequest& a, GetAttributeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAttributeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAttributeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAttributeRequest* New() const final {
    return CreateMaybeMessage<GetAttributeRequest>(nullptr);
  }

  GetAttributeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAttributeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAttributeRequest& from);
  void MergeFrom(const GetAttributeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAttributeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fpindex.GetAttributeRequest";
  }
  protected:
  explicit GetAttributeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_index_2eproto);
    return ::descriptor_table_index_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexNameFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // string index_name = 1;
  void clear_index_name();
  const std::string& index_name() const;
  void set_index_name(const std::string& value);
  void set_index_name(std::string&& value);
  void set_index_name(const char* value);
  void set_index_name(const char* value, size_t size);
  std::string* mutable_index_name();
  std::string* release_index_name();
  void set_allocated_index_name(std::string* index_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_index_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_index_name(
      std::string* index_name);
  private:
  const std::string& _internal_index_name() const;
  void _internal_set_index_name(const std::string& value);
  std::string* _internal_mutable_index_name();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:fpindex.GetAttributeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_index_2eproto;
};
// -------------------------------------------------------------------

class GetAttributeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fpindex.GetAttributeResponse) */ {
 public:
  inline GetAttributeResponse() : GetAttributeResponse(nullptr) {};
  virtual ~GetAttributeResponse();

  GetAttributeResponse(const GetAttributeResponse& from);
  GetAttributeResponse(GetAttributeResponse&& from) noexcept
    : GetAttributeResponse() {
    *this = ::std::move(from);
  }

  inline GetAttributeResponse& operator=(const GetAttributeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAttributeResponse& operator=(GetAttributeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAttributeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAttributeResponse* internal_default_instance() {
    return reinterpret_cast<const GetAttributeResponse*>(
               &_GetAttributeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetAttributeResponse& a, GetAttributeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAttributeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAttributeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAttributeResponse* New() const final {
    return CreateMaybeMessage<GetAttributeResponse>(nullptr);
  }

  GetAttributeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAttributeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAttributeResponse& from);
  void MergeFrom(const GetAttributeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAttributeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fpindex.GetAttributeResponse";
  }
  protected:
  explicit GetAttributeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_index_2eproto);
    return ::descriptor_table_index_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
  };
  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:fpindex.GetAttributeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_index_2eproto;
};
// -------------------------------------------------------------------

class InsertOrUpdateDocumentOp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fpindex.InsertOrUpdateDocumentOp) */ {
 public:
  inline InsertOrUpdateDocumentOp() : InsertOrUpdateDocumentOp(nullptr) {};
  virtual ~InsertOrUpdateDocumentOp();

  InsertOrUpdateDocumentOp(const InsertOrUpdateDocumentOp& from);
  InsertOrUpdateDocumentOp(InsertOrUpdateDocumentOp&& from) noexcept
    : InsertOrUpdateDocumentOp() {
    *this = ::std::move(from);
  }

  inline InsertOrUpdateDocumentOp& operator=(const InsertOrUpdateDocumentOp& from) {
    CopyFrom(from);
    return *this;
  }
  inline InsertOrUpdateDocumentOp& operator=(InsertOrUpdateDocumentOp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InsertOrUpdateDocumentOp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InsertOrUpdateDocumentOp* internal_default_instance() {
    return reinterpret_cast<const InsertOrUpdateDocumentOp*>(
               &_InsertOrUpdateDocumentOp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(InsertOrUpdateDocumentOp& a, InsertOrUpdateDocumentOp& b) {
    a.Swap(&b);
  }
  inline void Swap(InsertOrUpdateDocumentOp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InsertOrUpdateDocumentOp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InsertOrUpdateDocumentOp* New() const final {
    return CreateMaybeMessage<InsertOrUpdateDocumentOp>(nullptr);
  }

  InsertOrUpdateDocumentOp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InsertOrUpdateDocumentOp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InsertOrUpdateDocumentOp& from);
  void MergeFrom(const InsertOrUpdateDocumentOp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InsertOrUpdateDocumentOp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fpindex.InsertOrUpdateDocumentOp";
  }
  protected:
  explicit InsertOrUpdateDocumentOp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_index_2eproto);
    return ::descriptor_table_index_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermsFieldNumber = 2,
    kDocIdFieldNumber = 1,
  };
  // repeated uint32 terms = 2;
  int terms_size() const;
  private:
  int _internal_terms_size() const;
  public:
  void clear_terms();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_terms(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_terms() const;
  void _internal_add_terms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_terms();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 terms(int index) const;
  void set_terms(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_terms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      terms() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_terms();

  // uint32 doc_id = 1;
  void clear_doc_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 doc_id() const;
  void set_doc_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_doc_id() const;
  void _internal_set_doc_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fpindex.InsertOrUpdateDocumentOp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > terms_;
  mutable std::atomic<int> _terms_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 doc_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_index_2eproto;
};
// -------------------------------------------------------------------

class DeleteDocumentOp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fpindex.DeleteDocumentOp) */ {
 public:
  inline DeleteDocumentOp() : DeleteDocumentOp(nullptr) {};
  virtual ~DeleteDocumentOp();

  DeleteDocumentOp(const DeleteDocumentOp& from);
  DeleteDocumentOp(DeleteDocumentOp&& from) noexcept
    : DeleteDocumentOp() {
    *this = ::std::move(from);
  }

  inline DeleteDocumentOp& operator=(const DeleteDocumentOp& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteDocumentOp& operator=(DeleteDocumentOp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteDocumentOp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteDocumentOp* internal_default_instance() {
    return reinterpret_cast<const DeleteDocumentOp*>(
               &_DeleteDocumentOp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DeleteDocumentOp& a, DeleteDocumentOp& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteDocumentOp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteDocumentOp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteDocumentOp* New() const final {
    return CreateMaybeMessage<DeleteDocumentOp>(nullptr);
  }

  DeleteDocumentOp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteDocumentOp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteDocumentOp& from);
  void MergeFrom(const DeleteDocumentOp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteDocumentOp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fpindex.DeleteDocumentOp";
  }
  protected:
  explicit DeleteDocumentOp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_index_2eproto);
    return ::descriptor_table_index_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDocIdFieldNumber = 1,
  };
  // uint32 doc_id = 1;
  void clear_doc_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 doc_id() const;
  void set_doc_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_doc_id() const;
  void _internal_set_doc_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fpindex.DeleteDocumentOp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 doc_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_index_2eproto;
};
// -------------------------------------------------------------------

class SetAttributeOp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fpindex.SetAttributeOp) */ {
 public:
  inline SetAttributeOp() : SetAttributeOp(nullptr) {};
  virtual ~SetAttributeOp();

  SetAttributeOp(const SetAttributeOp& from);
  SetAttributeOp(SetAttributeOp&& from) noexcept
    : SetAttributeOp() {
    *this = ::std::move(from);
  }

  inline SetAttributeOp& operator=(const SetAttributeOp& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetAttributeOp& operator=(SetAttributeOp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetAttributeOp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetAttributeOp* internal_default_instance() {
    return reinterpret_cast<const SetAttributeOp*>(
               &_SetAttributeOp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SetAttributeOp& a, SetAttributeOp& b) {
    a.Swap(&b);
  }
  inline void Swap(SetAttributeOp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetAttributeOp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetAttributeOp* New() const final {
    return CreateMaybeMessage<SetAttributeOp>(nullptr);
  }

  SetAttributeOp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetAttributeOp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetAttributeOp& from);
  void MergeFrom(const SetAttributeOp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetAttributeOp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fpindex.SetAttributeOp";
  }
  protected:
  explicit SetAttributeOp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_index_2eproto);
    return ::descriptor_table_index_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:fpindex.SetAttributeOp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_index_2eproto;
};
// -------------------------------------------------------------------

class Operation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fpindex.Operation) */ {
 public:
  inline Operation() : Operation(nullptr) {};
  virtual ~Operation();

  Operation(const Operation& from);
  Operation(Operation&& from) noexcept
    : Operation() {
    *this = ::std::move(from);
  }

  inline Operation& operator=(const Operation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Operation& operator=(Operation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Operation& default_instance();

  enum OpCase {
    kInsertOrUpdateDocument = 1,
    kDeleteDocument = 2,
    kSetAttribute = 3,
    OP_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Operation* internal_default_instance() {
    return reinterpret_cast<const Operation*>(
               &_Operation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Operation& a, Operation& b) {
    a.Swap(&b);
  }
  inline void Swap(Operation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Operation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Operation* New() const final {
    return CreateMaybeMessage<Operation>(nullptr);
  }

  Operation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Operation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Operation& from);
  void MergeFrom(const Operation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Operation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fpindex.Operation";
  }
  protected:
  explicit Operation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_index_2eproto);
    return ::descriptor_table_index_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInsertOrUpdateDocumentFieldNumber = 1,
    kDeleteDocumentFieldNumber = 2,
    kSetAttributeFieldNumber = 3,
  };
  // .fpindex.InsertOrUpdateDocumentOp insert_or_update_document = 1;
  bool has_insert_or_update_document() const;
  private:
  bool _internal_has_insert_or_update_document() const;
  public:
  void clear_insert_or_update_document();
  const ::fpindex::InsertOrUpdateDocumentOp& insert_or_update_document() const;
  ::fpindex::InsertOrUpdateDocumentOp* release_insert_or_update_document();
  ::fpindex::InsertOrUpdateDocumentOp* mutable_insert_or_update_document();
  void set_allocated_insert_or_update_document(::fpindex::InsertOrUpdateDocumentOp* insert_or_update_document);
  private:
  const ::fpindex::InsertOrUpdateDocumentOp& _internal_insert_or_update_document() const;
  ::fpindex::InsertOrUpdateDocumentOp* _internal_mutable_insert_or_update_document();
  public:
  void unsafe_arena_set_allocated_insert_or_update_document(
      ::fpindex::InsertOrUpdateDocumentOp* insert_or_update_document);
  ::fpindex::InsertOrUpdateDocumentOp* unsafe_arena_release_insert_or_update_document();

  // .fpindex.DeleteDocumentOp delete_document = 2;
  bool has_delete_document() const;
  private:
  bool _internal_has_delete_document() const;
  public:
  void clear_delete_document();
  const ::fpindex::DeleteDocumentOp& delete_document() const;
  ::fpindex::DeleteDocumentOp* release_delete_document();
  ::fpindex::DeleteDocumentOp* mutable_delete_document();
  void set_allocated_delete_document(::fpindex::DeleteDocumentOp* delete_document);
  private:
  const ::fpindex::DeleteDocumentOp& _internal_delete_document() const;
  ::fpindex::DeleteDocumentOp* _internal_mutable_delete_document();
  public:
  void unsafe_arena_set_allocated_delete_document(
      ::fpindex::DeleteDocumentOp* delete_document);
  ::fpindex::DeleteDocumentOp* unsafe_arena_release_delete_document();

  // .fpindex.SetAttributeOp set_attribute = 3;
  bool has_set_attribute() const;
  private:
  bool _internal_has_set_attribute() const;
  public:
  void clear_set_attribute();
  const ::fpindex::SetAttributeOp& set_attribute() const;
  ::fpindex::SetAttributeOp* release_set_attribute();
  ::fpindex::SetAttributeOp* mutable_set_attribute();
  void set_allocated_set_attribute(::fpindex::SetAttributeOp* set_attribute);
  private:
  const ::fpindex::SetAttributeOp& _internal_set_attribute() const;
  ::fpindex::SetAttributeOp* _internal_mutable_set_attribute();
  public:
  void unsafe_arena_set_allocated_set_attribute(
      ::fpindex::SetAttributeOp* set_attribute);
  ::fpindex::SetAttributeOp* unsafe_arena_release_set_attribute();

  void clear_op();
  OpCase op_case() const;
  // @@protoc_insertion_point(class_scope:fpindex.Operation)
 private:
  class _Internal;
  void set_has_insert_or_update_document();
  void set_has_delete_document();
  void set_has_set_attribute();

  inline bool has_op() const;
  inline void clear_has_op();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union OpUnion {
    OpUnion() {}
    ::fpindex::InsertOrUpdateDocumentOp* insert_or_update_document_;
    ::fpindex::DeleteDocumentOp* delete_document_;
    ::fpindex::SetAttributeOp* set_attribute_;
  } op_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_index_2eproto;
};
// -------------------------------------------------------------------

class UpdateRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fpindex.UpdateRequest) */ {
 public:
  inline UpdateRequest() : UpdateRequest(nullptr) {};
  virtual ~UpdateRequest();

  UpdateRequest(const UpdateRequest& from);
  UpdateRequest(UpdateRequest&& from) noexcept
    : UpdateRequest() {
    *this = ::std::move(from);
  }

  inline UpdateRequest& operator=(const UpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateRequest& operator=(UpdateRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateRequest*>(
               &_UpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UpdateRequest& a, UpdateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateRequest* New() const final {
    return CreateMaybeMessage<UpdateRequest>(nullptr);
  }

  UpdateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateRequest& from);
  void MergeFrom(const UpdateRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fpindex.UpdateRequest";
  }
  protected:
  explicit UpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_index_2eproto);
    return ::descriptor_table_index_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpsFieldNumber = 2,
    kIndexNameFieldNumber = 1,
  };
  // repeated .fpindex.Operation ops = 2;
  int ops_size() const;
  private:
  int _internal_ops_size() const;
  public:
  void clear_ops();
  ::fpindex::Operation* mutable_ops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fpindex::Operation >*
      mutable_ops();
  private:
  const ::fpindex::Operation& _internal_ops(int index) const;
  ::fpindex::Operation* _internal_add_ops();
  public:
  const ::fpindex::Operation& ops(int index) const;
  ::fpindex::Operation* add_ops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fpindex::Operation >&
      ops() const;

  // string index_name = 1;
  void clear_index_name();
  const std::string& index_name() const;
  void set_index_name(const std::string& value);
  void set_index_name(std::string&& value);
  void set_index_name(const char* value);
  void set_index_name(const char* value, size_t size);
  std::string* mutable_index_name();
  std::string* release_index_name();
  void set_allocated_index_name(std::string* index_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_index_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_index_name(
      std::string* index_name);
  private:
  const std::string& _internal_index_name() const;
  void _internal_set_index_name(const std::string& value);
  std::string* _internal_mutable_index_name();
  public:

  // @@protoc_insertion_point(class_scope:fpindex.UpdateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fpindex::Operation > ops_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_index_2eproto;
};
// -------------------------------------------------------------------

class UpdateResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fpindex.UpdateResponse) */ {
 public:
  inline UpdateResponse() : UpdateResponse(nullptr) {};
  virtual ~UpdateResponse();

  UpdateResponse(const UpdateResponse& from);
  UpdateResponse(UpdateResponse&& from) noexcept
    : UpdateResponse() {
    *this = ::std::move(from);
  }

  inline UpdateResponse& operator=(const UpdateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateResponse& operator=(UpdateResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateResponse*>(
               &_UpdateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(UpdateResponse& a, UpdateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateResponse* New() const final {
    return CreateMaybeMessage<UpdateResponse>(nullptr);
  }

  UpdateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateResponse& from);
  void MergeFrom(const UpdateResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fpindex.UpdateResponse";
  }
  protected:
  explicit UpdateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_index_2eproto);
    return ::descriptor_table_index_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:fpindex.UpdateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_index_2eproto;
};
// -------------------------------------------------------------------

class SearchResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fpindex.SearchResult) */ {
 public:
  inline SearchResult() : SearchResult(nullptr) {};
  virtual ~SearchResult();

  SearchResult(const SearchResult& from);
  SearchResult(SearchResult&& from) noexcept
    : SearchResult() {
    *this = ::std::move(from);
  }

  inline SearchResult& operator=(const SearchResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchResult& operator=(SearchResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SearchResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchResult* internal_default_instance() {
    return reinterpret_cast<const SearchResult*>(
               &_SearchResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SearchResult& a, SearchResult& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SearchResult* New() const final {
    return CreateMaybeMessage<SearchResult>(nullptr);
  }

  SearchResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SearchResult& from);
  void MergeFrom(const SearchResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fpindex.SearchResult";
  }
  protected:
  explicit SearchResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_index_2eproto);
    return ::descriptor_table_index_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDocIdFieldNumber = 1,
    kScoreFieldNumber = 2,
  };
  // uint32 doc_id = 1;
  void clear_doc_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 doc_id() const;
  void set_doc_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_doc_id() const;
  void _internal_set_doc_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float score = 2;
  void clear_score();
  float score() const;
  void set_score(float value);
  private:
  float _internal_score() const;
  void _internal_set_score(float value);
  public:

  // @@protoc_insertion_point(class_scope:fpindex.SearchResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 doc_id_;
  float score_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_index_2eproto;
};
// -------------------------------------------------------------------

class SearchRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fpindex.SearchRequest) */ {
 public:
  inline SearchRequest() : SearchRequest(nullptr) {};
  virtual ~SearchRequest();

  SearchRequest(const SearchRequest& from);
  SearchRequest(SearchRequest&& from) noexcept
    : SearchRequest() {
    *this = ::std::move(from);
  }

  inline SearchRequest& operator=(const SearchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchRequest& operator=(SearchRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SearchRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchRequest* internal_default_instance() {
    return reinterpret_cast<const SearchRequest*>(
               &_SearchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SearchRequest& a, SearchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SearchRequest* New() const final {
    return CreateMaybeMessage<SearchRequest>(nullptr);
  }

  SearchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SearchRequest& from);
  void MergeFrom(const SearchRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fpindex.SearchRequest";
  }
  protected:
  explicit SearchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_index_2eproto);
    return ::descriptor_table_index_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTermsFieldNumber = 2,
    kIndexNameFieldNumber = 1,
    kMaxResultsFieldNumber = 3,
  };
  // repeated uint32 terms = 2;
  int terms_size() const;
  private:
  int _internal_terms_size() const;
  public:
  void clear_terms();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_terms(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_terms() const;
  void _internal_add_terms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_terms();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 terms(int index) const;
  void set_terms(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_terms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      terms() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_terms();

  // string index_name = 1;
  void clear_index_name();
  const std::string& index_name() const;
  void set_index_name(const std::string& value);
  void set_index_name(std::string&& value);
  void set_index_name(const char* value);
  void set_index_name(const char* value, size_t size);
  std::string* mutable_index_name();
  std::string* release_index_name();
  void set_allocated_index_name(std::string* index_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_index_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_index_name(
      std::string* index_name);
  private:
  const std::string& _internal_index_name() const;
  void _internal_set_index_name(const std::string& value);
  std::string* _internal_mutable_index_name();
  public:

  // int32 max_results = 3;
  void clear_max_results();
  ::PROTOBUF_NAMESPACE_ID::int32 max_results() const;
  void set_max_results(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_results() const;
  void _internal_set_max_results(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fpindex.SearchRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > terms_;
  mutable std::atomic<int> _terms_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_results_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_index_2eproto;
};
// -------------------------------------------------------------------

class SearchResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fpindex.SearchResponse) */ {
 public:
  inline SearchResponse() : SearchResponse(nullptr) {};
  virtual ~SearchResponse();

  SearchResponse(const SearchResponse& from);
  SearchResponse(SearchResponse&& from) noexcept
    : SearchResponse() {
    *this = ::std::move(from);
  }

  inline SearchResponse& operator=(const SearchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchResponse& operator=(SearchResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SearchResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchResponse* internal_default_instance() {
    return reinterpret_cast<const SearchResponse*>(
               &_SearchResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SearchResponse& a, SearchResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SearchResponse* New() const final {
    return CreateMaybeMessage<SearchResponse>(nullptr);
  }

  SearchResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SearchResponse& from);
  void MergeFrom(const SearchResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fpindex.SearchResponse";
  }
  protected:
  explicit SearchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_index_2eproto);
    return ::descriptor_table_index_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 1,
  };
  // repeated .fpindex.SearchResult results = 1;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  ::fpindex::SearchResult* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fpindex::SearchResult >*
      mutable_results();
  private:
  const ::fpindex::SearchResult& _internal_results(int index) const;
  ::fpindex::SearchResult* _internal_add_results();
  public:
  const ::fpindex::SearchResult& results(int index) const;
  ::fpindex::SearchResult* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fpindex::SearchResult >&
      results() const;

  // @@protoc_insertion_point(class_scope:fpindex.SearchResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fpindex::SearchResult > results_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_index_2eproto;
};
// -------------------------------------------------------------------

class GetIndexRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fpindex.GetIndexRequest) */ {
 public:
  inline GetIndexRequest() : GetIndexRequest(nullptr) {};
  virtual ~GetIndexRequest();

  GetIndexRequest(const GetIndexRequest& from);
  GetIndexRequest(GetIndexRequest&& from) noexcept
    : GetIndexRequest() {
    *this = ::std::move(from);
  }

  inline GetIndexRequest& operator=(const GetIndexRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetIndexRequest& operator=(GetIndexRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetIndexRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetIndexRequest* internal_default_instance() {
    return reinterpret_cast<const GetIndexRequest*>(
               &_GetIndexRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GetIndexRequest& a, GetIndexRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetIndexRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetIndexRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetIndexRequest* New() const final {
    return CreateMaybeMessage<GetIndexRequest>(nullptr);
  }

  GetIndexRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetIndexRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetIndexRequest& from);
  void MergeFrom(const GetIndexRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetIndexRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fpindex.GetIndexRequest";
  }
  protected:
  explicit GetIndexRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_index_2eproto);
    return ::descriptor_table_index_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexNameFieldNumber = 1,
  };
  // string index_name = 1;
  void clear_index_name();
  const std::string& index_name() const;
  void set_index_name(const std::string& value);
  void set_index_name(std::string&& value);
  void set_index_name(const char* value);
  void set_index_name(const char* value, size_t size);
  std::string* mutable_index_name();
  std::string* release_index_name();
  void set_allocated_index_name(std::string* index_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_index_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_index_name(
      std::string* index_name);
  private:
  const std::string& _internal_index_name() const;
  void _internal_set_index_name(const std::string& value);
  std::string* _internal_mutable_index_name();
  public:

  // @@protoc_insertion_point(class_scope:fpindex.GetIndexRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_index_2eproto;
};
// -------------------------------------------------------------------

class GetIndexResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fpindex.GetIndexResponse) */ {
 public:
  inline GetIndexResponse() : GetIndexResponse(nullptr) {};
  virtual ~GetIndexResponse();

  GetIndexResponse(const GetIndexResponse& from);
  GetIndexResponse(GetIndexResponse&& from) noexcept
    : GetIndexResponse() {
    *this = ::std::move(from);
  }

  inline GetIndexResponse& operator=(const GetIndexResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetIndexResponse& operator=(GetIndexResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetIndexResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetIndexResponse* internal_default_instance() {
    return reinterpret_cast<const GetIndexResponse*>(
               &_GetIndexResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GetIndexResponse& a, GetIndexResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetIndexResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetIndexResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetIndexResponse* New() const final {
    return CreateMaybeMessage<GetIndexResponse>(nullptr);
  }

  GetIndexResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetIndexResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetIndexResponse& from);
  void MergeFrom(const GetIndexResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetIndexResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fpindex.GetIndexResponse";
  }
  protected:
  explicit GetIndexResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_index_2eproto);
    return ::descriptor_table_index_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
  };
  // .fpindex.IndexInfo index = 1;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  const ::fpindex::IndexInfo& index() const;
  ::fpindex::IndexInfo* release_index();
  ::fpindex::IndexInfo* mutable_index();
  void set_allocated_index(::fpindex::IndexInfo* index);
  private:
  const ::fpindex::IndexInfo& _internal_index() const;
  ::fpindex::IndexInfo* _internal_mutable_index();
  public:
  void unsafe_arena_set_allocated_index(
      ::fpindex::IndexInfo* index);
  ::fpindex::IndexInfo* unsafe_arena_release_index();

  // @@protoc_insertion_point(class_scope:fpindex.GetIndexResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::fpindex::IndexInfo* index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_index_2eproto;
};
// -------------------------------------------------------------------

class CreateIndexRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fpindex.CreateIndexRequest) */ {
 public:
  inline CreateIndexRequest() : CreateIndexRequest(nullptr) {};
  virtual ~CreateIndexRequest();

  CreateIndexRequest(const CreateIndexRequest& from);
  CreateIndexRequest(CreateIndexRequest&& from) noexcept
    : CreateIndexRequest() {
    *this = ::std::move(from);
  }

  inline CreateIndexRequest& operator=(const CreateIndexRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateIndexRequest& operator=(CreateIndexRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateIndexRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateIndexRequest* internal_default_instance() {
    return reinterpret_cast<const CreateIndexRequest*>(
               &_CreateIndexRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CreateIndexRequest& a, CreateIndexRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateIndexRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateIndexRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateIndexRequest* New() const final {
    return CreateMaybeMessage<CreateIndexRequest>(nullptr);
  }

  CreateIndexRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateIndexRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateIndexRequest& from);
  void MergeFrom(const CreateIndexRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateIndexRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fpindex.CreateIndexRequest";
  }
  protected:
  explicit CreateIndexRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_index_2eproto);
    return ::descriptor_table_index_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexNameFieldNumber = 1,
  };
  // string index_name = 1;
  void clear_index_name();
  const std::string& index_name() const;
  void set_index_name(const std::string& value);
  void set_index_name(std::string&& value);
  void set_index_name(const char* value);
  void set_index_name(const char* value, size_t size);
  std::string* mutable_index_name();
  std::string* release_index_name();
  void set_allocated_index_name(std::string* index_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_index_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_index_name(
      std::string* index_name);
  private:
  const std::string& _internal_index_name() const;
  void _internal_set_index_name(const std::string& value);
  std::string* _internal_mutable_index_name();
  public:

  // @@protoc_insertion_point(class_scope:fpindex.CreateIndexRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_index_2eproto;
};
// -------------------------------------------------------------------

class CreateIndexResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fpindex.CreateIndexResponse) */ {
 public:
  inline CreateIndexResponse() : CreateIndexResponse(nullptr) {};
  virtual ~CreateIndexResponse();

  CreateIndexResponse(const CreateIndexResponse& from);
  CreateIndexResponse(CreateIndexResponse&& from) noexcept
    : CreateIndexResponse() {
    *this = ::std::move(from);
  }

  inline CreateIndexResponse& operator=(const CreateIndexResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateIndexResponse& operator=(CreateIndexResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateIndexResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateIndexResponse* internal_default_instance() {
    return reinterpret_cast<const CreateIndexResponse*>(
               &_CreateIndexResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CreateIndexResponse& a, CreateIndexResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateIndexResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateIndexResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateIndexResponse* New() const final {
    return CreateMaybeMessage<CreateIndexResponse>(nullptr);
  }

  CreateIndexResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateIndexResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateIndexResponse& from);
  void MergeFrom(const CreateIndexResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateIndexResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fpindex.CreateIndexResponse";
  }
  protected:
  explicit CreateIndexResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_index_2eproto);
    return ::descriptor_table_index_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
  };
  // .fpindex.IndexInfo index = 1;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  const ::fpindex::IndexInfo& index() const;
  ::fpindex::IndexInfo* release_index();
  ::fpindex::IndexInfo* mutable_index();
  void set_allocated_index(::fpindex::IndexInfo* index);
  private:
  const ::fpindex::IndexInfo& _internal_index() const;
  ::fpindex::IndexInfo* _internal_mutable_index();
  public:
  void unsafe_arena_set_allocated_index(
      ::fpindex::IndexInfo* index);
  ::fpindex::IndexInfo* unsafe_arena_release_index();

  // @@protoc_insertion_point(class_scope:fpindex.CreateIndexResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::fpindex::IndexInfo* index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_index_2eproto;
};
// -------------------------------------------------------------------

class DeleteIndexRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fpindex.DeleteIndexRequest) */ {
 public:
  inline DeleteIndexRequest() : DeleteIndexRequest(nullptr) {};
  virtual ~DeleteIndexRequest();

  DeleteIndexRequest(const DeleteIndexRequest& from);
  DeleteIndexRequest(DeleteIndexRequest&& from) noexcept
    : DeleteIndexRequest() {
    *this = ::std::move(from);
  }

  inline DeleteIndexRequest& operator=(const DeleteIndexRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteIndexRequest& operator=(DeleteIndexRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteIndexRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteIndexRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteIndexRequest*>(
               &_DeleteIndexRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(DeleteIndexRequest& a, DeleteIndexRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteIndexRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteIndexRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteIndexRequest* New() const final {
    return CreateMaybeMessage<DeleteIndexRequest>(nullptr);
  }

  DeleteIndexRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteIndexRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteIndexRequest& from);
  void MergeFrom(const DeleteIndexRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteIndexRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fpindex.DeleteIndexRequest";
  }
  protected:
  explicit DeleteIndexRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_index_2eproto);
    return ::descriptor_table_index_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexNameFieldNumber = 1,
  };
  // string index_name = 1;
  void clear_index_name();
  const std::string& index_name() const;
  void set_index_name(const std::string& value);
  void set_index_name(std::string&& value);
  void set_index_name(const char* value);
  void set_index_name(const char* value, size_t size);
  std::string* mutable_index_name();
  std::string* release_index_name();
  void set_allocated_index_name(std::string* index_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_index_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_index_name(
      std::string* index_name);
  private:
  const std::string& _internal_index_name() const;
  void _internal_set_index_name(const std::string& value);
  std::string* _internal_mutable_index_name();
  public:

  // @@protoc_insertion_point(class_scope:fpindex.DeleteIndexRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_index_2eproto;
};
// -------------------------------------------------------------------

class DeleteIndexResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fpindex.DeleteIndexResponse) */ {
 public:
  inline DeleteIndexResponse() : DeleteIndexResponse(nullptr) {};
  virtual ~DeleteIndexResponse();

  DeleteIndexResponse(const DeleteIndexResponse& from);
  DeleteIndexResponse(DeleteIndexResponse&& from) noexcept
    : DeleteIndexResponse() {
    *this = ::std::move(from);
  }

  inline DeleteIndexResponse& operator=(const DeleteIndexResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteIndexResponse& operator=(DeleteIndexResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteIndexResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteIndexResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteIndexResponse*>(
               &_DeleteIndexResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(DeleteIndexResponse& a, DeleteIndexResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteIndexResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteIndexResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteIndexResponse* New() const final {
    return CreateMaybeMessage<DeleteIndexResponse>(nullptr);
  }

  DeleteIndexResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteIndexResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteIndexResponse& from);
  void MergeFrom(const DeleteIndexResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteIndexResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fpindex.DeleteIndexResponse";
  }
  protected:
  explicit DeleteIndexResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_index_2eproto);
    return ::descriptor_table_index_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:fpindex.DeleteIndexResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_index_2eproto;
};
// -------------------------------------------------------------------

class ListIndexesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fpindex.ListIndexesRequest) */ {
 public:
  inline ListIndexesRequest() : ListIndexesRequest(nullptr) {};
  virtual ~ListIndexesRequest();

  ListIndexesRequest(const ListIndexesRequest& from);
  ListIndexesRequest(ListIndexesRequest&& from) noexcept
    : ListIndexesRequest() {
    *this = ::std::move(from);
  }

  inline ListIndexesRequest& operator=(const ListIndexesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListIndexesRequest& operator=(ListIndexesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListIndexesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListIndexesRequest* internal_default_instance() {
    return reinterpret_cast<const ListIndexesRequest*>(
               &_ListIndexesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ListIndexesRequest& a, ListIndexesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListIndexesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListIndexesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListIndexesRequest* New() const final {
    return CreateMaybeMessage<ListIndexesRequest>(nullptr);
  }

  ListIndexesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListIndexesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListIndexesRequest& from);
  void MergeFrom(const ListIndexesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListIndexesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fpindex.ListIndexesRequest";
  }
  protected:
  explicit ListIndexesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_index_2eproto);
    return ::descriptor_table_index_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:fpindex.ListIndexesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_index_2eproto;
};
// -------------------------------------------------------------------

class ListIndexesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fpindex.ListIndexesResponse) */ {
 public:
  inline ListIndexesResponse() : ListIndexesResponse(nullptr) {};
  virtual ~ListIndexesResponse();

  ListIndexesResponse(const ListIndexesResponse& from);
  ListIndexesResponse(ListIndexesResponse&& from) noexcept
    : ListIndexesResponse() {
    *this = ::std::move(from);
  }

  inline ListIndexesResponse& operator=(const ListIndexesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListIndexesResponse& operator=(ListIndexesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListIndexesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListIndexesResponse* internal_default_instance() {
    return reinterpret_cast<const ListIndexesResponse*>(
               &_ListIndexesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(ListIndexesResponse& a, ListIndexesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListIndexesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListIndexesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListIndexesResponse* New() const final {
    return CreateMaybeMessage<ListIndexesResponse>(nullptr);
  }

  ListIndexesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListIndexesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListIndexesResponse& from);
  void MergeFrom(const ListIndexesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListIndexesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fpindex.ListIndexesResponse";
  }
  protected:
  explicit ListIndexesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_index_2eproto);
    return ::descriptor_table_index_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexesFieldNumber = 1,
  };
  // repeated .fpindex.IndexInfo indexes = 1;
  int indexes_size() const;
  private:
  int _internal_indexes_size() const;
  public:
  void clear_indexes();
  ::fpindex::IndexInfo* mutable_indexes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fpindex::IndexInfo >*
      mutable_indexes();
  private:
  const ::fpindex::IndexInfo& _internal_indexes(int index) const;
  ::fpindex::IndexInfo* _internal_add_indexes();
  public:
  const ::fpindex::IndexInfo& indexes(int index) const;
  ::fpindex::IndexInfo* add_indexes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fpindex::IndexInfo >&
      indexes() const;

  // @@protoc_insertion_point(class_scope:fpindex.ListIndexesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fpindex::IndexInfo > indexes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_index_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IndexInfo

// string name = 1;
inline void IndexInfo::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IndexInfo::name() const {
  // @@protoc_insertion_point(field_get:fpindex.IndexInfo.name)
  return _internal_name();
}
inline void IndexInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:fpindex.IndexInfo.name)
}
inline std::string* IndexInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:fpindex.IndexInfo.name)
  return _internal_mutable_name();
}
inline const std::string& IndexInfo::_internal_name() const {
  return name_.Get();
}
inline void IndexInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IndexInfo::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fpindex.IndexInfo.name)
}
inline void IndexInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fpindex.IndexInfo.name)
}
inline void IndexInfo::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fpindex.IndexInfo.name)
}
inline std::string* IndexInfo::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IndexInfo::release_name() {
  // @@protoc_insertion_point(field_release:fpindex.IndexInfo.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IndexInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fpindex.IndexInfo.name)
}
inline std::string* IndexInfo::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fpindex.IndexInfo.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void IndexInfo::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fpindex.IndexInfo.name)
}

// -------------------------------------------------------------------

// GetAttributeRequest

// string index_name = 1;
inline void GetAttributeRequest::clear_index_name() {
  index_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetAttributeRequest::index_name() const {
  // @@protoc_insertion_point(field_get:fpindex.GetAttributeRequest.index_name)
  return _internal_index_name();
}
inline void GetAttributeRequest::set_index_name(const std::string& value) {
  _internal_set_index_name(value);
  // @@protoc_insertion_point(field_set:fpindex.GetAttributeRequest.index_name)
}
inline std::string* GetAttributeRequest::mutable_index_name() {
  // @@protoc_insertion_point(field_mutable:fpindex.GetAttributeRequest.index_name)
  return _internal_mutable_index_name();
}
inline const std::string& GetAttributeRequest::_internal_index_name() const {
  return index_name_.Get();
}
inline void GetAttributeRequest::_internal_set_index_name(const std::string& value) {
  
  index_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetAttributeRequest::set_index_name(std::string&& value) {
  
  index_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fpindex.GetAttributeRequest.index_name)
}
inline void GetAttributeRequest::set_index_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  index_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fpindex.GetAttributeRequest.index_name)
}
inline void GetAttributeRequest::set_index_name(const char* value,
    size_t size) {
  
  index_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fpindex.GetAttributeRequest.index_name)
}
inline std::string* GetAttributeRequest::_internal_mutable_index_name() {
  
  return index_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetAttributeRequest::release_index_name() {
  // @@protoc_insertion_point(field_release:fpindex.GetAttributeRequest.index_name)
  return index_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetAttributeRequest::set_allocated_index_name(std::string* index_name) {
  if (index_name != nullptr) {
    
  } else {
    
  }
  index_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), index_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fpindex.GetAttributeRequest.index_name)
}
inline std::string* GetAttributeRequest::unsafe_arena_release_index_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fpindex.GetAttributeRequest.index_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return index_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetAttributeRequest::unsafe_arena_set_allocated_index_name(
    std::string* index_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (index_name != nullptr) {
    
  } else {
    
  }
  index_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      index_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fpindex.GetAttributeRequest.index_name)
}

// string name = 2;
inline void GetAttributeRequest::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetAttributeRequest::name() const {
  // @@protoc_insertion_point(field_get:fpindex.GetAttributeRequest.name)
  return _internal_name();
}
inline void GetAttributeRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:fpindex.GetAttributeRequest.name)
}
inline std::string* GetAttributeRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:fpindex.GetAttributeRequest.name)
  return _internal_mutable_name();
}
inline const std::string& GetAttributeRequest::_internal_name() const {
  return name_.Get();
}
inline void GetAttributeRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetAttributeRequest::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fpindex.GetAttributeRequest.name)
}
inline void GetAttributeRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fpindex.GetAttributeRequest.name)
}
inline void GetAttributeRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fpindex.GetAttributeRequest.name)
}
inline std::string* GetAttributeRequest::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetAttributeRequest::release_name() {
  // @@protoc_insertion_point(field_release:fpindex.GetAttributeRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetAttributeRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fpindex.GetAttributeRequest.name)
}
inline std::string* GetAttributeRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fpindex.GetAttributeRequest.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetAttributeRequest::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fpindex.GetAttributeRequest.name)
}

// -------------------------------------------------------------------

// GetAttributeResponse

// string value = 2;
inline void GetAttributeResponse::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetAttributeResponse::value() const {
  // @@protoc_insertion_point(field_get:fpindex.GetAttributeResponse.value)
  return _internal_value();
}
inline void GetAttributeResponse::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:fpindex.GetAttributeResponse.value)
}
inline std::string* GetAttributeResponse::mutable_value() {
  // @@protoc_insertion_point(field_mutable:fpindex.GetAttributeResponse.value)
  return _internal_mutable_value();
}
inline const std::string& GetAttributeResponse::_internal_value() const {
  return value_.Get();
}
inline void GetAttributeResponse::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetAttributeResponse::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fpindex.GetAttributeResponse.value)
}
inline void GetAttributeResponse::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fpindex.GetAttributeResponse.value)
}
inline void GetAttributeResponse::set_value(const char* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fpindex.GetAttributeResponse.value)
}
inline std::string* GetAttributeResponse::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetAttributeResponse::release_value() {
  // @@protoc_insertion_point(field_release:fpindex.GetAttributeResponse.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetAttributeResponse::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fpindex.GetAttributeResponse.value)
}
inline std::string* GetAttributeResponse::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fpindex.GetAttributeResponse.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetAttributeResponse::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fpindex.GetAttributeResponse.value)
}

// -------------------------------------------------------------------

// InsertOrUpdateDocumentOp

// uint32 doc_id = 1;
inline void InsertOrUpdateDocumentOp::clear_doc_id() {
  doc_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InsertOrUpdateDocumentOp::_internal_doc_id() const {
  return doc_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InsertOrUpdateDocumentOp::doc_id() const {
  // @@protoc_insertion_point(field_get:fpindex.InsertOrUpdateDocumentOp.doc_id)
  return _internal_doc_id();
}
inline void InsertOrUpdateDocumentOp::_internal_set_doc_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  doc_id_ = value;
}
inline void InsertOrUpdateDocumentOp::set_doc_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_doc_id(value);
  // @@protoc_insertion_point(field_set:fpindex.InsertOrUpdateDocumentOp.doc_id)
}

// repeated uint32 terms = 2;
inline int InsertOrUpdateDocumentOp::_internal_terms_size() const {
  return terms_.size();
}
inline int InsertOrUpdateDocumentOp::terms_size() const {
  return _internal_terms_size();
}
inline void InsertOrUpdateDocumentOp::clear_terms() {
  terms_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InsertOrUpdateDocumentOp::_internal_terms(int index) const {
  return terms_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InsertOrUpdateDocumentOp::terms(int index) const {
  // @@protoc_insertion_point(field_get:fpindex.InsertOrUpdateDocumentOp.terms)
  return _internal_terms(index);
}
inline void InsertOrUpdateDocumentOp::set_terms(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  terms_.Set(index, value);
  // @@protoc_insertion_point(field_set:fpindex.InsertOrUpdateDocumentOp.terms)
}
inline void InsertOrUpdateDocumentOp::_internal_add_terms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  terms_.Add(value);
}
inline void InsertOrUpdateDocumentOp::add_terms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_terms(value);
  // @@protoc_insertion_point(field_add:fpindex.InsertOrUpdateDocumentOp.terms)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
InsertOrUpdateDocumentOp::_internal_terms() const {
  return terms_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
InsertOrUpdateDocumentOp::terms() const {
  // @@protoc_insertion_point(field_list:fpindex.InsertOrUpdateDocumentOp.terms)
  return _internal_terms();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
InsertOrUpdateDocumentOp::_internal_mutable_terms() {
  return &terms_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
InsertOrUpdateDocumentOp::mutable_terms() {
  // @@protoc_insertion_point(field_mutable_list:fpindex.InsertOrUpdateDocumentOp.terms)
  return _internal_mutable_terms();
}

// -------------------------------------------------------------------

// DeleteDocumentOp

// uint32 doc_id = 1;
inline void DeleteDocumentOp::clear_doc_id() {
  doc_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteDocumentOp::_internal_doc_id() const {
  return doc_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteDocumentOp::doc_id() const {
  // @@protoc_insertion_point(field_get:fpindex.DeleteDocumentOp.doc_id)
  return _internal_doc_id();
}
inline void DeleteDocumentOp::_internal_set_doc_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  doc_id_ = value;
}
inline void DeleteDocumentOp::set_doc_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_doc_id(value);
  // @@protoc_insertion_point(field_set:fpindex.DeleteDocumentOp.doc_id)
}

// -------------------------------------------------------------------

// SetAttributeOp

// string name = 1;
inline void SetAttributeOp::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetAttributeOp::name() const {
  // @@protoc_insertion_point(field_get:fpindex.SetAttributeOp.name)
  return _internal_name();
}
inline void SetAttributeOp::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:fpindex.SetAttributeOp.name)
}
inline std::string* SetAttributeOp::mutable_name() {
  // @@protoc_insertion_point(field_mutable:fpindex.SetAttributeOp.name)
  return _internal_mutable_name();
}
inline const std::string& SetAttributeOp::_internal_name() const {
  return name_.Get();
}
inline void SetAttributeOp::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetAttributeOp::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fpindex.SetAttributeOp.name)
}
inline void SetAttributeOp::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fpindex.SetAttributeOp.name)
}
inline void SetAttributeOp::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fpindex.SetAttributeOp.name)
}
inline std::string* SetAttributeOp::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetAttributeOp::release_name() {
  // @@protoc_insertion_point(field_release:fpindex.SetAttributeOp.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetAttributeOp::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fpindex.SetAttributeOp.name)
}
inline std::string* SetAttributeOp::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fpindex.SetAttributeOp.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SetAttributeOp::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fpindex.SetAttributeOp.name)
}

// string value = 2;
inline void SetAttributeOp::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetAttributeOp::value() const {
  // @@protoc_insertion_point(field_get:fpindex.SetAttributeOp.value)
  return _internal_value();
}
inline void SetAttributeOp::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:fpindex.SetAttributeOp.value)
}
inline std::string* SetAttributeOp::mutable_value() {
  // @@protoc_insertion_point(field_mutable:fpindex.SetAttributeOp.value)
  return _internal_mutable_value();
}
inline const std::string& SetAttributeOp::_internal_value() const {
  return value_.Get();
}
inline void SetAttributeOp::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetAttributeOp::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fpindex.SetAttributeOp.value)
}
inline void SetAttributeOp::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fpindex.SetAttributeOp.value)
}
inline void SetAttributeOp::set_value(const char* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fpindex.SetAttributeOp.value)
}
inline std::string* SetAttributeOp::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetAttributeOp::release_value() {
  // @@protoc_insertion_point(field_release:fpindex.SetAttributeOp.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetAttributeOp::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fpindex.SetAttributeOp.value)
}
inline std::string* SetAttributeOp::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fpindex.SetAttributeOp.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SetAttributeOp::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fpindex.SetAttributeOp.value)
}

// -------------------------------------------------------------------

// Operation

// .fpindex.InsertOrUpdateDocumentOp insert_or_update_document = 1;
inline bool Operation::_internal_has_insert_or_update_document() const {
  return op_case() == kInsertOrUpdateDocument;
}
inline bool Operation::has_insert_or_update_document() const {
  return _internal_has_insert_or_update_document();
}
inline void Operation::set_has_insert_or_update_document() {
  _oneof_case_[0] = kInsertOrUpdateDocument;
}
inline void Operation::clear_insert_or_update_document() {
  if (_internal_has_insert_or_update_document()) {
    if (GetArena() == nullptr) {
      delete op_.insert_or_update_document_;
    }
    clear_has_op();
  }
}
inline ::fpindex::InsertOrUpdateDocumentOp* Operation::release_insert_or_update_document() {
  // @@protoc_insertion_point(field_release:fpindex.Operation.insert_or_update_document)
  if (_internal_has_insert_or_update_document()) {
    clear_has_op();
      ::fpindex::InsertOrUpdateDocumentOp* temp = op_.insert_or_update_document_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    op_.insert_or_update_document_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::fpindex::InsertOrUpdateDocumentOp& Operation::_internal_insert_or_update_document() const {
  return _internal_has_insert_or_update_document()
      ? *op_.insert_or_update_document_
      : *reinterpret_cast< ::fpindex::InsertOrUpdateDocumentOp*>(&::fpindex::_InsertOrUpdateDocumentOp_default_instance_);
}
inline const ::fpindex::InsertOrUpdateDocumentOp& Operation::insert_or_update_document() const {
  // @@protoc_insertion_point(field_get:fpindex.Operation.insert_or_update_document)
  return _internal_insert_or_update_document();
}
inline ::fpindex::InsertOrUpdateDocumentOp* Operation::unsafe_arena_release_insert_or_update_document() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fpindex.Operation.insert_or_update_document)
  if (_internal_has_insert_or_update_document()) {
    clear_has_op();
    ::fpindex::InsertOrUpdateDocumentOp* temp = op_.insert_or_update_document_;
    op_.insert_or_update_document_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Operation::unsafe_arena_set_allocated_insert_or_update_document(::fpindex::InsertOrUpdateDocumentOp* insert_or_update_document) {
  clear_op();
  if (insert_or_update_document) {
    set_has_insert_or_update_document();
    op_.insert_or_update_document_ = insert_or_update_document;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fpindex.Operation.insert_or_update_document)
}
inline ::fpindex::InsertOrUpdateDocumentOp* Operation::_internal_mutable_insert_or_update_document() {
  if (!_internal_has_insert_or_update_document()) {
    clear_op();
    set_has_insert_or_update_document();
    op_.insert_or_update_document_ = CreateMaybeMessage< ::fpindex::InsertOrUpdateDocumentOp >(GetArena());
  }
  return op_.insert_or_update_document_;
}
inline ::fpindex::InsertOrUpdateDocumentOp* Operation::mutable_insert_or_update_document() {
  // @@protoc_insertion_point(field_mutable:fpindex.Operation.insert_or_update_document)
  return _internal_mutable_insert_or_update_document();
}

// .fpindex.DeleteDocumentOp delete_document = 2;
inline bool Operation::_internal_has_delete_document() const {
  return op_case() == kDeleteDocument;
}
inline bool Operation::has_delete_document() const {
  return _internal_has_delete_document();
}
inline void Operation::set_has_delete_document() {
  _oneof_case_[0] = kDeleteDocument;
}
inline void Operation::clear_delete_document() {
  if (_internal_has_delete_document()) {
    if (GetArena() == nullptr) {
      delete op_.delete_document_;
    }
    clear_has_op();
  }
}
inline ::fpindex::DeleteDocumentOp* Operation::release_delete_document() {
  // @@protoc_insertion_point(field_release:fpindex.Operation.delete_document)
  if (_internal_has_delete_document()) {
    clear_has_op();
      ::fpindex::DeleteDocumentOp* temp = op_.delete_document_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    op_.delete_document_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::fpindex::DeleteDocumentOp& Operation::_internal_delete_document() const {
  return _internal_has_delete_document()
      ? *op_.delete_document_
      : *reinterpret_cast< ::fpindex::DeleteDocumentOp*>(&::fpindex::_DeleteDocumentOp_default_instance_);
}
inline const ::fpindex::DeleteDocumentOp& Operation::delete_document() const {
  // @@protoc_insertion_point(field_get:fpindex.Operation.delete_document)
  return _internal_delete_document();
}
inline ::fpindex::DeleteDocumentOp* Operation::unsafe_arena_release_delete_document() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fpindex.Operation.delete_document)
  if (_internal_has_delete_document()) {
    clear_has_op();
    ::fpindex::DeleteDocumentOp* temp = op_.delete_document_;
    op_.delete_document_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Operation::unsafe_arena_set_allocated_delete_document(::fpindex::DeleteDocumentOp* delete_document) {
  clear_op();
  if (delete_document) {
    set_has_delete_document();
    op_.delete_document_ = delete_document;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fpindex.Operation.delete_document)
}
inline ::fpindex::DeleteDocumentOp* Operation::_internal_mutable_delete_document() {
  if (!_internal_has_delete_document()) {
    clear_op();
    set_has_delete_document();
    op_.delete_document_ = CreateMaybeMessage< ::fpindex::DeleteDocumentOp >(GetArena());
  }
  return op_.delete_document_;
}
inline ::fpindex::DeleteDocumentOp* Operation::mutable_delete_document() {
  // @@protoc_insertion_point(field_mutable:fpindex.Operation.delete_document)
  return _internal_mutable_delete_document();
}

// .fpindex.SetAttributeOp set_attribute = 3;
inline bool Operation::_internal_has_set_attribute() const {
  return op_case() == kSetAttribute;
}
inline bool Operation::has_set_attribute() const {
  return _internal_has_set_attribute();
}
inline void Operation::set_has_set_attribute() {
  _oneof_case_[0] = kSetAttribute;
}
inline void Operation::clear_set_attribute() {
  if (_internal_has_set_attribute()) {
    if (GetArena() == nullptr) {
      delete op_.set_attribute_;
    }
    clear_has_op();
  }
}
inline ::fpindex::SetAttributeOp* Operation::release_set_attribute() {
  // @@protoc_insertion_point(field_release:fpindex.Operation.set_attribute)
  if (_internal_has_set_attribute()) {
    clear_has_op();
      ::fpindex::SetAttributeOp* temp = op_.set_attribute_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    op_.set_attribute_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::fpindex::SetAttributeOp& Operation::_internal_set_attribute() const {
  return _internal_has_set_attribute()
      ? *op_.set_attribute_
      : *reinterpret_cast< ::fpindex::SetAttributeOp*>(&::fpindex::_SetAttributeOp_default_instance_);
}
inline const ::fpindex::SetAttributeOp& Operation::set_attribute() const {
  // @@protoc_insertion_point(field_get:fpindex.Operation.set_attribute)
  return _internal_set_attribute();
}
inline ::fpindex::SetAttributeOp* Operation::unsafe_arena_release_set_attribute() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fpindex.Operation.set_attribute)
  if (_internal_has_set_attribute()) {
    clear_has_op();
    ::fpindex::SetAttributeOp* temp = op_.set_attribute_;
    op_.set_attribute_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Operation::unsafe_arena_set_allocated_set_attribute(::fpindex::SetAttributeOp* set_attribute) {
  clear_op();
  if (set_attribute) {
    set_has_set_attribute();
    op_.set_attribute_ = set_attribute;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fpindex.Operation.set_attribute)
}
inline ::fpindex::SetAttributeOp* Operation::_internal_mutable_set_attribute() {
  if (!_internal_has_set_attribute()) {
    clear_op();
    set_has_set_attribute();
    op_.set_attribute_ = CreateMaybeMessage< ::fpindex::SetAttributeOp >(GetArena());
  }
  return op_.set_attribute_;
}
inline ::fpindex::SetAttributeOp* Operation::mutable_set_attribute() {
  // @@protoc_insertion_point(field_mutable:fpindex.Operation.set_attribute)
  return _internal_mutable_set_attribute();
}

inline bool Operation::has_op() const {
  return op_case() != OP_NOT_SET;
}
inline void Operation::clear_has_op() {
  _oneof_case_[0] = OP_NOT_SET;
}
inline Operation::OpCase Operation::op_case() const {
  return Operation::OpCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// UpdateRequest

// string index_name = 1;
inline void UpdateRequest::clear_index_name() {
  index_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateRequest::index_name() const {
  // @@protoc_insertion_point(field_get:fpindex.UpdateRequest.index_name)
  return _internal_index_name();
}
inline void UpdateRequest::set_index_name(const std::string& value) {
  _internal_set_index_name(value);
  // @@protoc_insertion_point(field_set:fpindex.UpdateRequest.index_name)
}
inline std::string* UpdateRequest::mutable_index_name() {
  // @@protoc_insertion_point(field_mutable:fpindex.UpdateRequest.index_name)
  return _internal_mutable_index_name();
}
inline const std::string& UpdateRequest::_internal_index_name() const {
  return index_name_.Get();
}
inline void UpdateRequest::_internal_set_index_name(const std::string& value) {
  
  index_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateRequest::set_index_name(std::string&& value) {
  
  index_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fpindex.UpdateRequest.index_name)
}
inline void UpdateRequest::set_index_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  index_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fpindex.UpdateRequest.index_name)
}
inline void UpdateRequest::set_index_name(const char* value,
    size_t size) {
  
  index_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fpindex.UpdateRequest.index_name)
}
inline std::string* UpdateRequest::_internal_mutable_index_name() {
  
  return index_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateRequest::release_index_name() {
  // @@protoc_insertion_point(field_release:fpindex.UpdateRequest.index_name)
  return index_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateRequest::set_allocated_index_name(std::string* index_name) {
  if (index_name != nullptr) {
    
  } else {
    
  }
  index_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), index_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fpindex.UpdateRequest.index_name)
}
inline std::string* UpdateRequest::unsafe_arena_release_index_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fpindex.UpdateRequest.index_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return index_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UpdateRequest::unsafe_arena_set_allocated_index_name(
    std::string* index_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (index_name != nullptr) {
    
  } else {
    
  }
  index_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      index_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fpindex.UpdateRequest.index_name)
}

// repeated .fpindex.Operation ops = 2;
inline int UpdateRequest::_internal_ops_size() const {
  return ops_.size();
}
inline int UpdateRequest::ops_size() const {
  return _internal_ops_size();
}
inline void UpdateRequest::clear_ops() {
  ops_.Clear();
}
inline ::fpindex::Operation* UpdateRequest::mutable_ops(int index) {
  // @@protoc_insertion_point(field_mutable:fpindex.UpdateRequest.ops)
  return ops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fpindex::Operation >*
UpdateRequest::mutable_ops() {
  // @@protoc_insertion_point(field_mutable_list:fpindex.UpdateRequest.ops)
  return &ops_;
}
inline const ::fpindex::Operation& UpdateRequest::_internal_ops(int index) const {
  return ops_.Get(index);
}
inline const ::fpindex::Operation& UpdateRequest::ops(int index) const {
  // @@protoc_insertion_point(field_get:fpindex.UpdateRequest.ops)
  return _internal_ops(index);
}
inline ::fpindex::Operation* UpdateRequest::_internal_add_ops() {
  return ops_.Add();
}
inline ::fpindex::Operation* UpdateRequest::add_ops() {
  // @@protoc_insertion_point(field_add:fpindex.UpdateRequest.ops)
  return _internal_add_ops();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fpindex::Operation >&
UpdateRequest::ops() const {
  // @@protoc_insertion_point(field_list:fpindex.UpdateRequest.ops)
  return ops_;
}

// -------------------------------------------------------------------

// UpdateResponse

// -------------------------------------------------------------------

// SearchResult

// uint32 doc_id = 1;
inline void SearchResult::clear_doc_id() {
  doc_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SearchResult::_internal_doc_id() const {
  return doc_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SearchResult::doc_id() const {
  // @@protoc_insertion_point(field_get:fpindex.SearchResult.doc_id)
  return _internal_doc_id();
}
inline void SearchResult::_internal_set_doc_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  doc_id_ = value;
}
inline void SearchResult::set_doc_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_doc_id(value);
  // @@protoc_insertion_point(field_set:fpindex.SearchResult.doc_id)
}

// float score = 2;
inline void SearchResult::clear_score() {
  score_ = 0;
}
inline float SearchResult::_internal_score() const {
  return score_;
}
inline float SearchResult::score() const {
  // @@protoc_insertion_point(field_get:fpindex.SearchResult.score)
  return _internal_score();
}
inline void SearchResult::_internal_set_score(float value) {
  
  score_ = value;
}
inline void SearchResult::set_score(float value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:fpindex.SearchResult.score)
}

// -------------------------------------------------------------------

// SearchRequest

// string index_name = 1;
inline void SearchRequest::clear_index_name() {
  index_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SearchRequest::index_name() const {
  // @@protoc_insertion_point(field_get:fpindex.SearchRequest.index_name)
  return _internal_index_name();
}
inline void SearchRequest::set_index_name(const std::string& value) {
  _internal_set_index_name(value);
  // @@protoc_insertion_point(field_set:fpindex.SearchRequest.index_name)
}
inline std::string* SearchRequest::mutable_index_name() {
  // @@protoc_insertion_point(field_mutable:fpindex.SearchRequest.index_name)
  return _internal_mutable_index_name();
}
inline const std::string& SearchRequest::_internal_index_name() const {
  return index_name_.Get();
}
inline void SearchRequest::_internal_set_index_name(const std::string& value) {
  
  index_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SearchRequest::set_index_name(std::string&& value) {
  
  index_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fpindex.SearchRequest.index_name)
}
inline void SearchRequest::set_index_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  index_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fpindex.SearchRequest.index_name)
}
inline void SearchRequest::set_index_name(const char* value,
    size_t size) {
  
  index_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fpindex.SearchRequest.index_name)
}
inline std::string* SearchRequest::_internal_mutable_index_name() {
  
  return index_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SearchRequest::release_index_name() {
  // @@protoc_insertion_point(field_release:fpindex.SearchRequest.index_name)
  return index_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SearchRequest::set_allocated_index_name(std::string* index_name) {
  if (index_name != nullptr) {
    
  } else {
    
  }
  index_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), index_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fpindex.SearchRequest.index_name)
}
inline std::string* SearchRequest::unsafe_arena_release_index_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fpindex.SearchRequest.index_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return index_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SearchRequest::unsafe_arena_set_allocated_index_name(
    std::string* index_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (index_name != nullptr) {
    
  } else {
    
  }
  index_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      index_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fpindex.SearchRequest.index_name)
}

// repeated uint32 terms = 2;
inline int SearchRequest::_internal_terms_size() const {
  return terms_.size();
}
inline int SearchRequest::terms_size() const {
  return _internal_terms_size();
}
inline void SearchRequest::clear_terms() {
  terms_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SearchRequest::_internal_terms(int index) const {
  return terms_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SearchRequest::terms(int index) const {
  // @@protoc_insertion_point(field_get:fpindex.SearchRequest.terms)
  return _internal_terms(index);
}
inline void SearchRequest::set_terms(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  terms_.Set(index, value);
  // @@protoc_insertion_point(field_set:fpindex.SearchRequest.terms)
}
inline void SearchRequest::_internal_add_terms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  terms_.Add(value);
}
inline void SearchRequest::add_terms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_terms(value);
  // @@protoc_insertion_point(field_add:fpindex.SearchRequest.terms)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SearchRequest::_internal_terms() const {
  return terms_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
SearchRequest::terms() const {
  // @@protoc_insertion_point(field_list:fpindex.SearchRequest.terms)
  return _internal_terms();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SearchRequest::_internal_mutable_terms() {
  return &terms_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
SearchRequest::mutable_terms() {
  // @@protoc_insertion_point(field_mutable_list:fpindex.SearchRequest.terms)
  return _internal_mutable_terms();
}

// int32 max_results = 3;
inline void SearchRequest::clear_max_results() {
  max_results_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SearchRequest::_internal_max_results() const {
  return max_results_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SearchRequest::max_results() const {
  // @@protoc_insertion_point(field_get:fpindex.SearchRequest.max_results)
  return _internal_max_results();
}
inline void SearchRequest::_internal_set_max_results(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_results_ = value;
}
inline void SearchRequest::set_max_results(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_results(value);
  // @@protoc_insertion_point(field_set:fpindex.SearchRequest.max_results)
}

// -------------------------------------------------------------------

// SearchResponse

// repeated .fpindex.SearchResult results = 1;
inline int SearchResponse::_internal_results_size() const {
  return results_.size();
}
inline int SearchResponse::results_size() const {
  return _internal_results_size();
}
inline void SearchResponse::clear_results() {
  results_.Clear();
}
inline ::fpindex::SearchResult* SearchResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:fpindex.SearchResponse.results)
  return results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fpindex::SearchResult >*
SearchResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:fpindex.SearchResponse.results)
  return &results_;
}
inline const ::fpindex::SearchResult& SearchResponse::_internal_results(int index) const {
  return results_.Get(index);
}
inline const ::fpindex::SearchResult& SearchResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:fpindex.SearchResponse.results)
  return _internal_results(index);
}
inline ::fpindex::SearchResult* SearchResponse::_internal_add_results() {
  return results_.Add();
}
inline ::fpindex::SearchResult* SearchResponse::add_results() {
  // @@protoc_insertion_point(field_add:fpindex.SearchResponse.results)
  return _internal_add_results();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fpindex::SearchResult >&
SearchResponse::results() const {
  // @@protoc_insertion_point(field_list:fpindex.SearchResponse.results)
  return results_;
}

// -------------------------------------------------------------------

// GetIndexRequest

// string index_name = 1;
inline void GetIndexRequest::clear_index_name() {
  index_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetIndexRequest::index_name() const {
  // @@protoc_insertion_point(field_get:fpindex.GetIndexRequest.index_name)
  return _internal_index_name();
}
inline void GetIndexRequest::set_index_name(const std::string& value) {
  _internal_set_index_name(value);
  // @@protoc_insertion_point(field_set:fpindex.GetIndexRequest.index_name)
}
inline std::string* GetIndexRequest::mutable_index_name() {
  // @@protoc_insertion_point(field_mutable:fpindex.GetIndexRequest.index_name)
  return _internal_mutable_index_name();
}
inline const std::string& GetIndexRequest::_internal_index_name() const {
  return index_name_.Get();
}
inline void GetIndexRequest::_internal_set_index_name(const std::string& value) {
  
  index_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetIndexRequest::set_index_name(std::string&& value) {
  
  index_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fpindex.GetIndexRequest.index_name)
}
inline void GetIndexRequest::set_index_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  index_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fpindex.GetIndexRequest.index_name)
}
inline void GetIndexRequest::set_index_name(const char* value,
    size_t size) {
  
  index_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fpindex.GetIndexRequest.index_name)
}
inline std::string* GetIndexRequest::_internal_mutable_index_name() {
  
  return index_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetIndexRequest::release_index_name() {
  // @@protoc_insertion_point(field_release:fpindex.GetIndexRequest.index_name)
  return index_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetIndexRequest::set_allocated_index_name(std::string* index_name) {
  if (index_name != nullptr) {
    
  } else {
    
  }
  index_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), index_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fpindex.GetIndexRequest.index_name)
}
inline std::string* GetIndexRequest::unsafe_arena_release_index_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fpindex.GetIndexRequest.index_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return index_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetIndexRequest::unsafe_arena_set_allocated_index_name(
    std::string* index_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (index_name != nullptr) {
    
  } else {
    
  }
  index_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      index_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fpindex.GetIndexRequest.index_name)
}

// -------------------------------------------------------------------

// GetIndexResponse

// .fpindex.IndexInfo index = 1;
inline bool GetIndexResponse::_internal_has_index() const {
  return this != internal_default_instance() && index_ != nullptr;
}
inline bool GetIndexResponse::has_index() const {
  return _internal_has_index();
}
inline void GetIndexResponse::clear_index() {
  if (GetArena() == nullptr && index_ != nullptr) {
    delete index_;
  }
  index_ = nullptr;
}
inline const ::fpindex::IndexInfo& GetIndexResponse::_internal_index() const {
  const ::fpindex::IndexInfo* p = index_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fpindex::IndexInfo*>(
      &::fpindex::_IndexInfo_default_instance_);
}
inline const ::fpindex::IndexInfo& GetIndexResponse::index() const {
  // @@protoc_insertion_point(field_get:fpindex.GetIndexResponse.index)
  return _internal_index();
}
inline void GetIndexResponse::unsafe_arena_set_allocated_index(
    ::fpindex::IndexInfo* index) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(index_);
  }
  index_ = index;
  if (index) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fpindex.GetIndexResponse.index)
}
inline ::fpindex::IndexInfo* GetIndexResponse::release_index() {
  auto temp = unsafe_arena_release_index();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fpindex::IndexInfo* GetIndexResponse::unsafe_arena_release_index() {
  // @@protoc_insertion_point(field_release:fpindex.GetIndexResponse.index)
  
  ::fpindex::IndexInfo* temp = index_;
  index_ = nullptr;
  return temp;
}
inline ::fpindex::IndexInfo* GetIndexResponse::_internal_mutable_index() {
  
  if (index_ == nullptr) {
    auto* p = CreateMaybeMessage<::fpindex::IndexInfo>(GetArena());
    index_ = p;
  }
  return index_;
}
inline ::fpindex::IndexInfo* GetIndexResponse::mutable_index() {
  // @@protoc_insertion_point(field_mutable:fpindex.GetIndexResponse.index)
  return _internal_mutable_index();
}
inline void GetIndexResponse::set_allocated_index(::fpindex::IndexInfo* index) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete index_;
  }
  if (index) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(index);
    if (message_arena != submessage_arena) {
      index = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, index, submessage_arena);
    }
    
  } else {
    
  }
  index_ = index;
  // @@protoc_insertion_point(field_set_allocated:fpindex.GetIndexResponse.index)
}

// -------------------------------------------------------------------

// CreateIndexRequest

// string index_name = 1;
inline void CreateIndexRequest::clear_index_name() {
  index_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateIndexRequest::index_name() const {
  // @@protoc_insertion_point(field_get:fpindex.CreateIndexRequest.index_name)
  return _internal_index_name();
}
inline void CreateIndexRequest::set_index_name(const std::string& value) {
  _internal_set_index_name(value);
  // @@protoc_insertion_point(field_set:fpindex.CreateIndexRequest.index_name)
}
inline std::string* CreateIndexRequest::mutable_index_name() {
  // @@protoc_insertion_point(field_mutable:fpindex.CreateIndexRequest.index_name)
  return _internal_mutable_index_name();
}
inline const std::string& CreateIndexRequest::_internal_index_name() const {
  return index_name_.Get();
}
inline void CreateIndexRequest::_internal_set_index_name(const std::string& value) {
  
  index_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateIndexRequest::set_index_name(std::string&& value) {
  
  index_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fpindex.CreateIndexRequest.index_name)
}
inline void CreateIndexRequest::set_index_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  index_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fpindex.CreateIndexRequest.index_name)
}
inline void CreateIndexRequest::set_index_name(const char* value,
    size_t size) {
  
  index_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fpindex.CreateIndexRequest.index_name)
}
inline std::string* CreateIndexRequest::_internal_mutable_index_name() {
  
  return index_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateIndexRequest::release_index_name() {
  // @@protoc_insertion_point(field_release:fpindex.CreateIndexRequest.index_name)
  return index_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateIndexRequest::set_allocated_index_name(std::string* index_name) {
  if (index_name != nullptr) {
    
  } else {
    
  }
  index_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), index_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fpindex.CreateIndexRequest.index_name)
}
inline std::string* CreateIndexRequest::unsafe_arena_release_index_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fpindex.CreateIndexRequest.index_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return index_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CreateIndexRequest::unsafe_arena_set_allocated_index_name(
    std::string* index_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (index_name != nullptr) {
    
  } else {
    
  }
  index_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      index_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fpindex.CreateIndexRequest.index_name)
}

// -------------------------------------------------------------------

// CreateIndexResponse

// .fpindex.IndexInfo index = 1;
inline bool CreateIndexResponse::_internal_has_index() const {
  return this != internal_default_instance() && index_ != nullptr;
}
inline bool CreateIndexResponse::has_index() const {
  return _internal_has_index();
}
inline void CreateIndexResponse::clear_index() {
  if (GetArena() == nullptr && index_ != nullptr) {
    delete index_;
  }
  index_ = nullptr;
}
inline const ::fpindex::IndexInfo& CreateIndexResponse::_internal_index() const {
  const ::fpindex::IndexInfo* p = index_;
  return p != nullptr ? *p : *reinterpret_cast<const ::fpindex::IndexInfo*>(
      &::fpindex::_IndexInfo_default_instance_);
}
inline const ::fpindex::IndexInfo& CreateIndexResponse::index() const {
  // @@protoc_insertion_point(field_get:fpindex.CreateIndexResponse.index)
  return _internal_index();
}
inline void CreateIndexResponse::unsafe_arena_set_allocated_index(
    ::fpindex::IndexInfo* index) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(index_);
  }
  index_ = index;
  if (index) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fpindex.CreateIndexResponse.index)
}
inline ::fpindex::IndexInfo* CreateIndexResponse::release_index() {
  auto temp = unsafe_arena_release_index();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::fpindex::IndexInfo* CreateIndexResponse::unsafe_arena_release_index() {
  // @@protoc_insertion_point(field_release:fpindex.CreateIndexResponse.index)
  
  ::fpindex::IndexInfo* temp = index_;
  index_ = nullptr;
  return temp;
}
inline ::fpindex::IndexInfo* CreateIndexResponse::_internal_mutable_index() {
  
  if (index_ == nullptr) {
    auto* p = CreateMaybeMessage<::fpindex::IndexInfo>(GetArena());
    index_ = p;
  }
  return index_;
}
inline ::fpindex::IndexInfo* CreateIndexResponse::mutable_index() {
  // @@protoc_insertion_point(field_mutable:fpindex.CreateIndexResponse.index)
  return _internal_mutable_index();
}
inline void CreateIndexResponse::set_allocated_index(::fpindex::IndexInfo* index) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete index_;
  }
  if (index) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(index);
    if (message_arena != submessage_arena) {
      index = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, index, submessage_arena);
    }
    
  } else {
    
  }
  index_ = index;
  // @@protoc_insertion_point(field_set_allocated:fpindex.CreateIndexResponse.index)
}

// -------------------------------------------------------------------

// DeleteIndexRequest

// string index_name = 1;
inline void DeleteIndexRequest::clear_index_name() {
  index_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteIndexRequest::index_name() const {
  // @@protoc_insertion_point(field_get:fpindex.DeleteIndexRequest.index_name)
  return _internal_index_name();
}
inline void DeleteIndexRequest::set_index_name(const std::string& value) {
  _internal_set_index_name(value);
  // @@protoc_insertion_point(field_set:fpindex.DeleteIndexRequest.index_name)
}
inline std::string* DeleteIndexRequest::mutable_index_name() {
  // @@protoc_insertion_point(field_mutable:fpindex.DeleteIndexRequest.index_name)
  return _internal_mutable_index_name();
}
inline const std::string& DeleteIndexRequest::_internal_index_name() const {
  return index_name_.Get();
}
inline void DeleteIndexRequest::_internal_set_index_name(const std::string& value) {
  
  index_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteIndexRequest::set_index_name(std::string&& value) {
  
  index_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fpindex.DeleteIndexRequest.index_name)
}
inline void DeleteIndexRequest::set_index_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  index_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fpindex.DeleteIndexRequest.index_name)
}
inline void DeleteIndexRequest::set_index_name(const char* value,
    size_t size) {
  
  index_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fpindex.DeleteIndexRequest.index_name)
}
inline std::string* DeleteIndexRequest::_internal_mutable_index_name() {
  
  return index_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteIndexRequest::release_index_name() {
  // @@protoc_insertion_point(field_release:fpindex.DeleteIndexRequest.index_name)
  return index_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteIndexRequest::set_allocated_index_name(std::string* index_name) {
  if (index_name != nullptr) {
    
  } else {
    
  }
  index_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), index_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fpindex.DeleteIndexRequest.index_name)
}
inline std::string* DeleteIndexRequest::unsafe_arena_release_index_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fpindex.DeleteIndexRequest.index_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return index_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeleteIndexRequest::unsafe_arena_set_allocated_index_name(
    std::string* index_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (index_name != nullptr) {
    
  } else {
    
  }
  index_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      index_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fpindex.DeleteIndexRequest.index_name)
}

// -------------------------------------------------------------------

// DeleteIndexResponse

// -------------------------------------------------------------------

// ListIndexesRequest

// -------------------------------------------------------------------

// ListIndexesResponse

// repeated .fpindex.IndexInfo indexes = 1;
inline int ListIndexesResponse::_internal_indexes_size() const {
  return indexes_.size();
}
inline int ListIndexesResponse::indexes_size() const {
  return _internal_indexes_size();
}
inline void ListIndexesResponse::clear_indexes() {
  indexes_.Clear();
}
inline ::fpindex::IndexInfo* ListIndexesResponse::mutable_indexes(int index) {
  // @@protoc_insertion_point(field_mutable:fpindex.ListIndexesResponse.indexes)
  return indexes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fpindex::IndexInfo >*
ListIndexesResponse::mutable_indexes() {
  // @@protoc_insertion_point(field_mutable_list:fpindex.ListIndexesResponse.indexes)
  return &indexes_;
}
inline const ::fpindex::IndexInfo& ListIndexesResponse::_internal_indexes(int index) const {
  return indexes_.Get(index);
}
inline const ::fpindex::IndexInfo& ListIndexesResponse::indexes(int index) const {
  // @@protoc_insertion_point(field_get:fpindex.ListIndexesResponse.indexes)
  return _internal_indexes(index);
}
inline ::fpindex::IndexInfo* ListIndexesResponse::_internal_add_indexes() {
  return indexes_.Add();
}
inline ::fpindex::IndexInfo* ListIndexesResponse::add_indexes() {
  // @@protoc_insertion_point(field_add:fpindex.ListIndexesResponse.indexes)
  return _internal_add_indexes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fpindex::IndexInfo >&
ListIndexesResponse::indexes() const {
  // @@protoc_insertion_point(field_list:fpindex.ListIndexesResponse.indexes)
  return indexes_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fpindex

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_index_2eproto
